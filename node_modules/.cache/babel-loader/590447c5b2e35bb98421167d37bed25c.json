{"ast":null,"code":"var _jsxFileName = \"/Users/liam/react-moonland/src/App.js\";\nimport styles from './App.css';\nimport React, { useState, useEffect } from \"react\";\nimport Unity, { UnityContext } from \"react-unity-webgl\";\nimport * as solanaWeb3 from '@solana/web3.js';\nimport parse from 'html-react-parser';\nimport background from \"./background.png\";\nimport ProgressBar from 'react-bootstrap/Button';\nimport reactDom from 'react-dom';\nconst unityContext = new UnityContext({\n  loaderUrl: \"./Build/public.loader.js\",\n  dataUrl: \"./Build/public.data\",\n  frameworkUrl: \"./Build/public.framework.js\",\n  codeUrl: \"./Build/public.wasm\"\n});\n\nfunction App() {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [progression, setProgression] = useState(0);\n  const [provider, setProvider] = useState(\"\");\n}\n\nexport default App; //create a connection of devnet\n\nconst createConnection = () => {\n  return new Connection(clusterApiUrl(\"devnet\"));\n}; //check solana on window. This is useful to fetch address of your wallet.\n\n\nconst getProvider = () => {\n  if (\"solana\" in window) {\n    const provider = window.solana;\n\n    if (provider.isPhantom) {\n      return provider;\n    }\n  }\n}; //get NFT\n\n\nconst getAllNftData = async () => {\n  try {\n    const connect = createConnectionConfig(clusterApiUrl(\"devnet\"));\n    const provider = getProvider();\n    let ownerToken = provider.publicKey;\n    const result = isValidSolanaAddress(ownerToken);\n    console.log(\"result\", result);\n    const nfts = await getParsedNftAccountsByOwner({\n      publicAddress: ownerToken,\n      connection: connect,\n      serialization: true\n    });\n    return nfts;\n  } catch (error) {\n    console.log(error);\n  }\n}; //Function to get all nft data\n\n\nconst getNftTokenData = async () => {\n  try {\n    let nftData = await getAllNftData();\n    var data = Object.keys(nftData).map(key => nftData[key]);\n    let arr = [];\n    let n = data.length;\n\n    for (let i = 0; i < n; i++) {\n      console.log(data[i].data.uri);\n      let val = await axios.get(data[i].data.uri);\n      arr.push(val);\n    }\n\n    return arr;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst NFT = props => {\n  const [nftData, setNftData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  createConnection();\n  getProvider();\n  getAllNftData();\n  useEffect(() => {\n    async function data() {\n      let res = await getAllNftData();\n      setNftData(res);\n      setLoading(true);\n    }\n\n    data();\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"section\", {\n    className: \"nft mt-2 my-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 19\n    }\n  }, \"NFT\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row  d-flex justify-content-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 15\n    }\n  }, loading ? /*#__PURE__*/React.createElement(React.Fragment, null, nftData && nftData.length > 0 && nftData.map((val, ind) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-4 mt-3\",\n      key: ind,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 27\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cart text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"img mt-4 pt-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 31\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: val.data.image,\n      alt: \"loading...\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"mt-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 33\n      }\n    }, val.data.name), /*#__PURE__*/React.createElement(\"h6\", {\n      className: \" mt-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 33\n      }\n    }, val.data.description))));\n  })) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 21\n    }\n  }, \"loading...\"))))));\n}; // function App() {\n//   return (\n//     <div>\n//       <Unity unityContext={unityContext}\n//       style={{\n//         height: \"100%\",\n//         width: 950,\n//         border: \"2xp solid black\",\n//         background: \"grey\"\n//       }}\n//       /> \n//     </div>\n//   );\n// }\n// export default App;\n// function App() {\n//   return <Unity unityContext={unityContext} />;\n// }\n// function App() {\n//   const [isLoaded, setIsLoaded] = useState(false);\n//   const [progression, setProgression] = useState(0);\n//   const [provider, setProvider] = useState(\"\");\n//   const getProvider = async () => {\n//     if (\"solana\" in window) {\n//       await window.solana.connect(); // opens wallet to connect to\n//       const provider = window.solana;\n//       if (provider.isPhantom) {\n//         console.log(\"Is Phantom installed?  \", provider.isPhantom);\n//         return provider;\n//       }\n//     } else {\n//       window.alert('Install https://www.phantom.app/');\n//     }\n//   };\n//   var publicKey;\n//   window.onload = () => {\n//     getProvider().then(provider => {\n//       console.log('key',\n//       provider.publicKey.toString());\n//       publicKey = provider.publicKey.toString();\n//       setProvider(provider.publicKey.toString());\n//     })\n//     .catch(function(error){\n//       console.log(error)\n//     });\n//   }\n//   useEffect( () => {\n//    setProvider(publicKey);\n//   }, []);\n//   useEffect( () => {\n//     setProvider(publicKey);\n//    }, []);\n//    useEffect(function () {\n//     unityContext.on(\"GetWallet\", function () {\n//       if (window.solana.isConnected)\n//       {\n//         console.log(window.solana.publicKey.toString());\n//       console.log(provider.publicKey);\n//       unityContext.send(\"Wallet\", \"SetWallet\", window.solana.publicKey.toString());\n//       }\n//       else\n//       {\n//         window.alert(\"Pleas Connect your Wallet or play like a guest\");\n//       }\n//     });\n//   }, []);\n//   useEffect(function () {\n//     unityContext.on(\"progress\", function (progression) {\n//       setProgression(progression);\n//     });\n//   }, []);\n//   useEffect(function () {\n//     unityContext.on(\"loaded\", function () {\n//       setIsLoaded(true);\n//     });\n//   }, []);\n//   return (\n//   <div style = {{\n//     visibility: isLoaded ? \"hidden\" : \"visible\",\n//     backgroundImage: `url(${background})`,\n//       backgroundSize: \"cover\",\n//       height: \"100%\",\n//       width: \"100%\",\n//       color: \"#f5f5f5\",\n//     position: 'absolute',\n//     left: 0,\n//     top: 0,\n//   }}>\n//    <div>\n//   <ProgressBar variant=\"success\" now={progression * 100}\n//   style={{ visibility: isLoaded ? \"hidden\" : \"visible\",\n//   height: \"10px\",\n//   width: \"100%\",\n//   position: \"absolute\",\n//   bottom: 0,\n//   color: \"red\",\n//   }}\n//   />\n//     </div>\n//    <p\n//     style={{ visibility: isLoaded ? \"hidden\" : \"visible\",\n//     height: \"30px\",\n//     width: \"100%\",\n//     position: \"absolute\",\n//     textAlign: 'center',\n//     bottom: \"100px\",\n//     fontSize: \"2em\",\n//     fontColor: \"red\",\n//     }}>Loading...</p>\n//    <div>\n//    <Unity\n//       style={{ visibility: isLoaded ? \"visible\" : \"hidden\",\n//         height: \"100%\",\n//         width: \"100%\",\n//         background: \"grey\",\n//         position: 'absolute',\n//         left: 0,\n//         top: 0,\n//         overflow: \"hidden\",\n//     }}\n//       unityContext={unityContext}\n//     />\n//     </div>\n//     </div>\n//   );\n// }\n// export default App","map":{"version":3,"sources":["/Users/liam/react-moonland/src/App.js"],"names":["styles","React","useState","useEffect","Unity","UnityContext","solanaWeb3","parse","background","ProgressBar","reactDom","unityContext","loaderUrl","dataUrl","frameworkUrl","codeUrl","App","isLoaded","setIsLoaded","progression","setProgression","provider","setProvider","createConnection","Connection","clusterApiUrl","getProvider","window","solana","isPhantom","getAllNftData","connect","createConnectionConfig","ownerToken","publicKey","result","isValidSolanaAddress","console","log","nfts","getParsedNftAccountsByOwner","publicAddress","connection","serialization","error","getNftTokenData","nftData","data","Object","keys","map","key","arr","n","length","i","uri","val","axios","get","push","NFT","props","setNftData","loading","setLoading","res","ind","image","name","description"],"mappings":";AAAA,OAAOA,MAAP,MAAmB,WAAnB;AACA,OAAOC,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAA0C,OAA1C;AACA,OAAOC,KAAP,IAAgBC,YAAhB,QAAoC,mBAApC;AACA,OAAO,KAAKC,UAAZ,MAA4B,iBAA5B;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,OAAOC,QAAP,MAAqB,WAArB;AAEA,MAAMC,YAAY,GAAG,IAAIN,YAAJ,CAAiB;AACpCO,EAAAA,SAAS,EAAE,0BADyB;AAEpCC,EAAAA,OAAO,EAAE,qBAF2B;AAGpCC,EAAAA,YAAY,EAAE,6BAHsB;AAIpCC,EAAAA,OAAO,EAAE;AAJ2B,CAAjB,CAArB;;AAQA,SAASC,GAAT,GAAe;AACb,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BhB,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACiB,WAAD,EAAcC,cAAd,IAAgClB,QAAQ,CAAC,CAAD,CAA9C;AACA,QAAM,CAACmB,QAAD,EAAWC,WAAX,IAA0BpB,QAAQ,CAAC,EAAD,CAAxC;AACD;;AAGD,eAAec,GAAf,C,CACA;;AACA,MAAMO,gBAAgB,GAAG,MAAM;AAC3B,SAAO,IAAIC,UAAJ,CAAeC,aAAa,CAAC,QAAD,CAA5B,CAAP;AACH,CAFD,C,CAIA;;;AACA,MAAMC,WAAW,GAAG,MAAM;AACxB,MAAI,YAAYC,MAAhB,EAAwB;AACxB,UAAMN,QAAQ,GAAGM,MAAM,CAACC,MAAxB;;AACA,QAAIP,QAAQ,CAACQ,SAAb,EAAwB;AACtB,aAAOR,QAAP;AACA;AACD;AACF,CAPD,C,CASA;;;AACA,MAAMS,aAAa,GAAG,YAAY;AAChC,MAAI;AACA,UAAMC,OAAO,GAAMC,sBAAsB,CAACP,aAAa,CAAC,QAAD,CAAd,CAAzC;AACA,UAAMJ,QAAQ,GAAGK,WAAW,EAA5B;AACA,QAAIO,UAAU,GAAGZ,QAAQ,CAACa,SAA1B;AACA,UAAMC,MAAM,GAAGC,oBAAoB,CAACH,UAAD,CAAnC;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBH,MAAtB;AACN,UAAMI,IAAI,GAAG,MAAMC,2BAA2B,CAAC;AACvCC,MAAAA,aAAa,EAAER,UADwB;AAEvCS,MAAAA,UAAU,EAAEX,OAF2B;AAGvCY,MAAAA,aAAa,EAAE;AAHwB,KAAD,CAA9C;AAKM,WAAOJ,IAAP;AACH,GAZD,CAYE,OAAOK,KAAP,EAAc;AACdP,IAAAA,OAAO,CAACC,GAAR,CAAYM,KAAZ;AACD;AACF,CAhBD,C,CAkBA;;;AACA,MAAMC,eAAe,GAAG,YAAY;AAClC,MAAI;AACF,QAAIC,OAAO,GAAG,MAAMhB,aAAa,EAAjC;AACA,QAAIiB,IAAI,GAAGC,MAAM,CAACC,IAAP,CAAYH,OAAZ,EAAqBI,GAArB,CAA0BC,GAAD,IAASL,OAAO,CAACK,GAAD,CAAzC,CAAX;AAA+H,QAAIC,GAAG,GAAG,EAAV;AAC/H,QAAIC,CAAC,GAAGN,IAAI,CAACO,MAAb;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,CAApB,EAAuBE,CAAC,EAAxB,EAA4B;AAC1BlB,MAAAA,OAAO,CAACC,GAAR,CAAYS,IAAI,CAACQ,CAAD,CAAJ,CAAQR,IAAR,CAAaS,GAAzB;AACA,UAAIC,GAAG,GAAG,MAAMC,KAAK,CAACC,GAAN,CAAUZ,IAAI,CAACQ,CAAD,CAAJ,CAAQR,IAAR,CAAaS,GAAvB,CAAhB;AACAJ,MAAAA,GAAG,CAACQ,IAAJ,CAASH,GAAT;AACD;;AACD,WAAOL,GAAP;AACD,GAVD,CAUE,OAAOR,KAAP,EAAc;AACdP,IAAAA,OAAO,CAACC,GAAR,CAAYM,KAAZ;AACD;AACF,CAdD;;AAgBA,MAAMiB,GAAG,GAAIC,KAAD,IAAW;AACrB,QAAM,CAAChB,OAAD,EAAUiB,UAAV,IAAwB7D,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAAC8D,OAAD,EAAUC,UAAV,IAAwB/D,QAAQ,CAAC,KAAD,CAAtC;AACAqB,EAAAA,gBAAgB;AAChBG,EAAAA,WAAW;AACXI,EAAAA,aAAa;AACf3B,EAAAA,SAAS,CAAC,MAAM;AACZ,mBAAe4C,IAAf,GAAsB;AACpB,UAAImB,GAAG,GAAG,MAAMpC,aAAa,EAA7B;AACAiC,MAAAA,UAAU,CAACG,GAAD,CAAV;AACAD,MAAAA,UAAU,CAAC,IAAD,CAAV;AACD;;AACDlB,IAAAA,IAAI;AACL,GAPM,EAOJ,EAPI,CAAT;AAQA,sBACI,uDACM;AAAS,IAAA,SAAS,EAAC,eAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAI,IAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADF,CADF,CADF,eAME;AAAK,IAAA,SAAS,EAAC,oCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGiB,OAAO,gBACN,0CACGlB,OAAO,IACNA,OAAO,CAACQ,MAAR,GAAiB,CADlB,IAECR,OAAO,CAACI,GAAR,CAAY,CAACO,GAAD,EAAMU,GAAN,KAAc;AACxB,wBACE;AAAK,MAAA,SAAS,EAAC,YAAf;AAA4B,MAAA,GAAG,EAAEA,GAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,GAAG,EAAEV,GAAG,CAACV,IAAJ,CAASqB,KAAnB;AAA0B,MAAA,GAAG,EAAC,YAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE;AAAG,MAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAqBX,GAAG,CAACV,IAAJ,CAASsB,IAA9B,CAFF,eAGE;AAAI,MAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGZ,GAAG,CAACV,IAAJ,CAASuB,WADZ,CAHF,CADF,CADF,CADF;AAaD,GAdD,CAHJ,CADM,gBAqBN,uDACE;AAAG,IAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,CAtBJ,CANF,CADF,CADN,CADJ;AAwCC,CAtDD,C,CAysourcesContent":["import styles from './App.css';\nimport React, {useState, useEffect } from \"react\";\nimport Unity, { UnityContext } from \"react-unity-webgl\";\nimport * as solanaWeb3 from '@solana/web3.js';\nimport parse from 'html-react-parser';\nimport background from \"./background.png\";\nimport ProgressBar from 'react-bootstrap/Button';\nimport reactDom from 'react-dom';\n\nconst unityContext = new UnityContext({\n  loaderUrl: \"./Build/public.loader.js\",\n  dataUrl: \"./Build/public.data\",\n  frameworkUrl: \"./Build/public.framework.js\",\n  codeUrl: \"./Build/public.wasm\"\n});\n\n\nfunction App() {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [progression, setProgression] = useState(0);\n  const [provider, setProvider] = useState(\"\");\n}\n\n\nexport default App;\n//create a connection of devnet\nconst createConnection = () => {\n    return new Connection(clusterApiUrl(\"devnet\"));\n};\n\n//check solana on window. This is useful to fetch address of your wallet.\nconst getProvider = () => {\n  if (\"solana\" in window) {\n  const provider = window.solana;\n  if (provider.isPhantom) {\n    return provider;\n   }\n  }\n};\n\n//get NFT\nconst getAllNftData = async () => {\n  try {\n      const connect =    createConnectionConfig(clusterApiUrl(\"devnet\"));\n      const provider = getProvider();\n      let ownerToken = provider.publicKey;\n      const result = isValidSolanaAddress(ownerToken);\n      console.log(\"result\", result);\nconst nfts = await getParsedNftAccountsByOwner({\n        publicAddress: ownerToken,\n        connection: connect,\n        serialization: true,\n      });\n      return nfts;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//Function to get all nft data\nconst getNftTokenData = async () => {\n  try {\n    let nftData = await getAllNftData();\n    var data = Object.keys(nftData).map((key) => nftData[key]);                                                                    let arr = [];\n    let n = data.length;\n    for (let i = 0; i < n; i++) {\n      console.log(data[i].data.uri);\n      let val = await axios.get(data[i].data.uri);\n      arr.push(val);\n    }\n    return arr;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst NFT = (props) => {\n  const [nftData, setNftData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  createConnection();\n  getProvider();\n  getAllNftData();\nuseEffect(() => {\n    async function data() {\n      let res = await getAllNftData();\n      setNftData(res);\n      setLoading(true);\n    }\n    data();\n  }, []);\nreturn (\n    <>\n          <section className=\"nft mt-2 my-5\">\n            <div className=\"container\">\n              <div className=\"row text-center\">\n                <div className=\"col-12\">\n                  <h4 className=\"title\">NFT</h4>\n                </div>\n              </div>\n              <div className=\"row  d-flex justify-content-center\">\n                {loading ? (\n                  <>\n                    {nftData &&\n                      nftData.length > 0 &&\n                      nftData.map((val, ind) => {\n                        return (\n                          <div className=\"col-4 mt-3\" key={ind}>\n                            <div className=\"cart text-center\">\n                              <div className=\"img mt-4 pt-3\">\n                                <img src={val.data.image} alt=\"loading...\" />\n                                <p className=\"mt-1\">{val.data.name}</p>\n                                <h6 className=\" mt-2\">\n                                  {val.data.description}\n                                </h6>\n                              </div>\n                            </div>\n                          </div>\n                        );\n                      })}\n                  </>\n                ) : (\n                  <>\n                    <p className=\"text-center\">loading...</p>\n                  </>\n                )}\n              </div>\n            </div>\n          </section>\n    </>\n  );\n};\n\n\n// function App() {\n\n//   return (\n//     <div>\n//       <Unity unityContext={unityContext}\n//       style={{\n//         height: \"100%\",\n//         width: 950,\n//         border: \"2xp solid black\",\n//         background: \"grey\"\n//       }}\n//       /> \n//     </div>\n//   );\n// }\n\n// export default App;\n\n\n\n// function App() {\n//   return <Unity unityContext={unityContext} />;\n// }\n\n// function App() {\n//   const [isLoaded, setIsLoaded] = useState(false);\n//   const [progression, setProgression] = useState(0);\n//   const [provider, setProvider] = useState(\"\");\n  \n\n\n//   const getProvider = async () => {\n//     if (\"solana\" in window) {\n      \n//       await window.solana.connect(); // opens wallet to connect to\n  \n//       const provider = window.solana;\n//       if (provider.isPhantom) {\n//         console.log(\"Is Phantom installed?  \", provider.isPhantom);\n//         return provider;\n//       }\n//     } else {\n//       window.alert('Install https://www.phantom.app/');\n//     }\n//   };\n  \n//   var publicKey;\n  \n//   window.onload = () => {\n  \n//     getProvider().then(provider => {\n//       console.log('key',\n      \n      \n//       provider.publicKey.toString());\n//       publicKey = provider.publicKey.toString();\n//       setProvider(provider.publicKey.toString());\n//     })\n//     .catch(function(error){\n//       console.log(error)\n//     });\n  \n//   }\n  \n\n\n//   useEffect( () => {\n//    setProvider(publicKey);\n//   }, []);\n//   useEffect( () => {\n//     setProvider(publicKey);\n//    }, []);\n\n\n//    useEffect(function () {\n\n    \n//     unityContext.on(\"GetWallet\", function () {\n\n         \n     \n//       if (window.solana.isConnected)\n//       {\n//         console.log(window.solana.publicKey.toString());\n      \n//       console.log(provider.publicKey);\n//       unityContext.send(\"Wallet\", \"SetWallet\", window.solana.publicKey.toString());\n\n//       }\n//       else\n//       {\n//         window.alert(\"Pleas Connect your Wallet or play like a guest\");\n//       }\n      \n\n      \n     \n//     });\n//   }, []);\n\n\n//   useEffect(function () {\n//     unityContext.on(\"progress\", function (progression) {\n//       setProgression(progression);\n//     });\n//   }, []);\n\n\n//   useEffect(function () {\n//     unityContext.on(\"loaded\", function () {\n//       setIsLoaded(true);\n//     });\n//   }, []);\n \n\n\n\n//   return (\n\n//   <div style = {{\n//     visibility: isLoaded ? \"hidden\" : \"visible\",\n//     backgroundImage: `url(${background})`,\n//       backgroundSize: \"cover\",\n//       height: \"100%\",\n//       width: \"100%\",\n//       color: \"#f5f5f5\",\n//     position: 'absolute',\n//     left: 0,\n//     top: 0,\n\n    \n//   }}>\n//    <div>\n//   <ProgressBar variant=\"success\" now={progression * 100}\n//   style={{ visibility: isLoaded ? \"hidden\" : \"visible\",\n//   height: \"10px\",\n//   width: \"100%\",\n//   position: \"absolute\",\n//   bottom: 0,\n//   color: \"red\",\n//   }}\n  \n//   />\n  \n//     </div>\n    \n//    <p\n//     style={{ visibility: isLoaded ? \"hidden\" : \"visible\",\n//     height: \"30px\",\n//     width: \"100%\",\n//     position: \"absolute\",\n//     textAlign: 'center',\n//     bottom: \"100px\",\n//     fontSize: \"2em\",\n//     fontColor: \"red\",\n\n    \n \n//     }}>Loading...</p>\n   \n//    <div>\n//    <Unity\n//       style={{ visibility: isLoaded ? \"visible\" : \"hidden\",\n//         height: \"100%\",\n//         width: \"100%\",\n//         background: \"grey\",\n//         position: 'absolute',\n//         left: 0,\n//         top: 0,\n//         overflow: \"hidden\",\n     \n//     }}\n//       unityContext={unityContext}\n//     />\n//     </div>\n//     </div>\n//   );\n// }\n\n// export default App"]},"metadata":{},"sourceType":"module"}