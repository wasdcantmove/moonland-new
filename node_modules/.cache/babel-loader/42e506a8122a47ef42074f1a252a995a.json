{"ast":null,"code":"import _regeneratorRuntime from\"/Users/liam/react-moonland/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/liam/react-moonland/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/liam/react-moonland/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import styles from'./App.css';import React,{useState,useEffect}from\"react\";import Unity,{UnityContext}from\"react-unity-webgl\";import*as solanaWeb3 from'@solana/web3.js';import parse from'html-react-parser';import background from\"./background.png\";import ProgressBar from'react-bootstrap/Button';import reactDom from'react-dom';import axios from\"axios\";import{Connection,clusterApiUrl,LAMPORTS_PER_SOL}from\"@solana/web3.js\";import{getParsedNftAccountsByOwner,isValidSolanaAddress,createConnectionConfig}from\"@nfteyez/sol-rayz\";import'./App.css';var publicKey;var allNftData;var unityContext=new UnityContext({loaderUrl:\"./Build/public.loader.js\",dataUrl:\"./Build/public.data\",frameworkUrl:\"./Build/public.framework.js\",codeUrl:\"./Build/public.wasm\"});function App(){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isLoaded=_useState2[0],setIsLoaded=_useState2[1];var _useState3=useState(0),_useState4=_slicedToArray(_useState3,2),progression=_useState4[0],setProgression=_useState4[1];var _useState5=useState(\"\"),_useState6=_slicedToArray(_useState5,2),provider=_useState6[0],setProvider=_useState6[1];var getProvider=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _provider;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!(\"solana\"in window)){_context.next=11;break;}_context.next=3;return window.solana.connect();case 3:// opens wallet to connect to\n_provider=window.solana;if(!_provider.isPhantom){_context.next=9;break;}console.log(\"Is Phantom installed?  \",_provider.isPhantom);console.log(\"Are we connected?  \",_provider.isConnected);console.log(\"And our key?  \",_provider.publicKey.toString());return _context.abrupt(\"return\",_provider);case 9:_context.next=12;break;case 11:window.alert('Install https://www.phantom.app/');case 12:case\"end\":return _context.stop();}}},_callee);}));return function getProvider(){return _ref.apply(this,arguments);};}();// window.onload = () => {\n//   getProvider().then(provider => {\n//     console.log('key', provider.publicKey.toString());\n//     publicKey = provider.publicKey.toString();\n//     setProvider(provider.publicKey.toString());\n//   }).then(() => {\n//     letsgo();\n//   }).catch(function(error){\n//     console.log(error)\n//   });\n// }\nfunction letsgo(){return _letsgo.apply(this,arguments);}//create a connection\nfunction _letsgo(){_letsgo=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(){var data,_data2;return _regeneratorRuntime.wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:_data2=function _data4(){_data2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(){var res;return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:_context6.next=2;return getAllNftData();case 2:res=_context6.sent;getNftTokenData();case 4:case\"end\":return _context6.stop();}}},_callee6);}));return _data2.apply(this,arguments);};data=function _data3(){return _data2.apply(this,arguments);};createConnection();getProvider();data();case 5:case\"end\":return _context7.stop();}}},_callee7);}));return _letsgo.apply(this,arguments);}var createConnection=function createConnection(){// return new Connection(clusterApiUrl(\"devnet\"));\nreturn new Connection(clusterApiUrl(\"mainnet-beta\"));};//get NFT\nvar getAllNftData=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var connect,_provider2,ownerToken,result,nfts;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;connect=createConnectionConfig(clusterApiUrl(\"mainnet-beta\"));// const connect =  createConnectionConfig(clusterApiUrl(\"devnet\"));\n_provider2=getProvider();ownerToken=publicKey;result=isValidSolanaAddress(ownerToken);_context2.next=7;return getParsedNftAccountsByOwner({publicAddress:ownerToken,connection:connect,serialization:true});case 7:nfts=_context2.sent;return _context2.abrupt(\"return\",nfts);case 11:_context2.prev=11;_context2.t0=_context2[\"catch\"](0);console.log(_context2.t0);case 14:case\"end\":return _context2.stop();}}},_callee2,null,[[0,11]]);}));return function getAllNftData(){return _ref2.apply(this,arguments);};}();//Function to get all nft data\nvar getNftTokenData=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var root,nftData,data,n,i,val;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.prev=0;root={data:{arr:[]}};_context3.next=4;return getAllNftData();case 4:nftData=_context3.sent;data=Object.keys(nftData).map(function(key){return nftData[key];});n=data.length;i=0;case 8:if(!(i<n)){_context3.next=16;break;}_context3.next=11;return axios.header(\"Access-Control-Allow-Origin: *\").get(data[i].data.uri);case 11:val=_context3.sent;root.data.arr.push(val);case 13:i++;_context3.next=8;break;case 16:allNftData=root.data;console.log(allNftData);return _context3.abrupt(\"return\",root.data.arr);case 21:_context3.prev=21;_context3.t0=_context3[\"catch\"](0);console.log(_context3.t0);case 24:case\"end\":return _context3.stop();}}},_callee3,null,[[0,21]]);}));return function getNftTokenData(){return _ref3.apply(this,arguments);};}();var NFT=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(props){var _useState7,_useState8,nftData,setNftData,_useState9,_useState10,loading,setLoading;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_useState7=useState([]),_useState8=_slicedToArray(_useState7,2),nftData=_useState8[0],setNftData=_useState8[1];_useState9=useState(false),_useState10=_slicedToArray(_useState9,2),loading=_useState10[0],setLoading=_useState10[1];createConnection();getProvider();useEffect(function(){function data(){return _data.apply(this,arguments);}function _data(){_data=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(){var res;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.next=2;return getAllNftData();case 2:res=_context4.sent;setNftData(res);setLoading(true);getNftTokenData();case 6:case\"end\":return _context4.stop();}}},_callee4);}));return _data.apply(this,arguments);}data();},[]);case 5:case\"end\":return _context5.stop();}}},_callee5);}));return function NFT(_x){return _ref4.apply(this,arguments);};}();useEffect(function(){setProvider(publicKey);},[]);useEffect(function(){setProvider(publicKey);},[]);useEffect(function(){unityContext.on(\"NFT\",function(){if(window.solana.isConnected){console.log(JSON.stringify(allNftData));unityContext.send(\"SolanaWalletConnect\",\"SetNFTData\",JSON.stringify(allNftData));}else{getProvider().then(function(provider){console.log('key',provider.publicKey.toString());publicKey=provider.publicKey.toString();setProvider(provider.publicKey.toString());}).then(function(){letsgo();}).catch(function(error){console.log(error);});}});},[]);useEffect(function(){unityContext.on(\"Logout\",function(){if(window.solana.isConnected){window.solana.disconnect();}});},[]);useEffect(function(){unityContext.on(\"progress\",function(progression){console.log(\"progress\");setProgression(progression);});},[]);useEffect(function(){unityContext.on(\"loaded\",function(){console.log(\"loaded\");setIsLoaded(true);});},[]);return/*#__PURE__*/React.createElement(\"div\",{style:{visibility:isLoaded?\"hidden\":\"visible\",backgroundImage:\"url(\".concat(background,\")\"),backgroundSize:\"cover\",height:\"100%\",width:\"100%\",color:\"#f5f5f5\",position:'absolute',left:0,top:0}},/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(ProgressBar,{variant:\"success\",now:progression*100,style:{visibility:isLoaded?\"hidden\":\"visible\",height:\"10px\",width:\"100%\",position:\"absolute\",bottom:0,color:\"red\"}})),/*#__PURE__*/React.createElement(\"p\",{style:{visibility:isLoaded?\"hidden\":\"visible\",height:\"30px\",width:\"100%\",position:\"absolute\",textAlign:'center',bottom:\"100px\",fontSize:\"2em\",fontColor:\"red\"}},\"Loading...\"),/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(Unity,{style:{visibility:isLoaded?\"visible\":\"hidden\",height:\"100%\",width:\"100%\",background:\"grey\",position:'absolute',left:0,top:0,overflow:\"hidden\"},unityContext:unityContext})));}export default App;","map":{"version":3,"sources":["/Users/liam/react-moonland/src/App.js"],"names":["styles","React","useState","useEffect","Unity","UnityContext","solanaWeb3","parse","background","ProgressBar","reactDom","axios","Connection","clusterApiUrl","LAMPORTS_PER_SOL","getParsedNftAccountsByOwner","isValidSolanaAddress","createConnectionConfig","publicKey","allNftData","unityContext","loaderUrl","dataUrl","frameworkUrl","codeUrl","App","isLoaded","setIsLoaded","progression","setProgression","provider","setProvider","getProvider","window","solana","connect","isPhantom","console","log","isConnected","toString","alert","letsgo","data","getAllNftData","res","getNftTokenData","createConnection","ownerToken","result","publicAddress","connection","serialization","nfts","root","arr","nftData","Object","keys","map","key","n","length","i","header","get","uri","val","push","NFT","props","setNftData","loading","setLoading","on","JSON","stringify","send","then","catch","error","disconnect","visibility","backgroundImage","backgroundSize","height","width","color","position","left","top","bottom","textAlign","fontSize","fontColor","overflow"],"mappings":"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","sourcesContent":["import styles from './App.css';\nimport React, {useState, useEffect } from \"react\";\nimport Unity, { UnityContext } from \"react-unity-webgl\";\nimport * as solanaWeb3 from '@solana/web3.js';\nimport parse from 'html-react-parser';\nimport background from \"./background.png\";\nimport ProgressBar from 'react-bootstrap/Button';\nimport reactDom from 'react-dom';\nimport axios from \"axios\";\nimport { Connection, clusterApiUrl, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\nimport { getParsedNftAccountsByOwner,isValidSolanaAddress, createConnectionConfig,} from \"@nfteyez/sol-rayz\";\nimport './App.css';\n\nvar publicKey;\nvar allNftData;\n\nconst unityContext = new UnityContext({\n  loaderUrl: \"./Build/public.loader.js\",\n  dataUrl: \"./Build/public.data\",\n  frameworkUrl: \"./Build/public.framework.js\",\n  codeUrl: \"./Build/public.wasm\"\n});\n\nfunction App() {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [progression, setProgression] = useState(0);\n  const [provider, setProvider] = useState(\"\");\n\n\n  const getProvider = async () => {\n    if (\"solana\" in window) {\n      await window.solana.connect(); // opens wallet to connect to\n      const provider = window.solana;\n      if (provider.isPhantom) {\n        console.log(\"Is Phantom installed?  \", provider.isPhantom);\n        console.log(\"Are we connected?  \", provider.isConnected);\n        console.log(\"And our key?  \", provider.publicKey.toString());\n        return provider;\n      }\n    } else {\n      window.alert('Install https://www.phantom.app/');\n    }\n  };\n  \n  // window.onload = () => {\n  //   getProvider().then(provider => {\n  //     console.log('key', provider.publicKey.toString());\n  //     publicKey = provider.publicKey.toString();\n  //     setProvider(provider.publicKey.toString());\n  //   }).then(() => {\n  //     letsgo();\n  //   }).catch(function(error){\n  //     console.log(error)\n  //   });\n  // }\n\n  async function letsgo() {\n     createConnection();\n     getProvider();\n       async function data() {\n         let res = await getAllNftData();\n         getNftTokenData();\n       }\n       data();\n  }\n\n  //create a connection\nconst createConnection = () => {\n  // return new Connection(clusterApiUrl(\"devnet\"));\n  return new Connection(clusterApiUrl(\"mainnet-beta\"));\n};\n\n  //get NFT\n  const getAllNftData = async () => {\n    try {\n      const connect =  createConnectionConfig(clusterApiUrl(\"mainnet-beta\"));\n      // const connect =  createConnectionConfig(clusterApiUrl(\"devnet\"));\n      const provider = getProvider();\n      let ownerToken = publicKey;\n      const result = isValidSolanaAddress(ownerToken);\n      const nfts = await getParsedNftAccountsByOwner({\n        publicAddress: ownerToken,\n        connection: connect,\n        serialization: true,\n      });\n      return nfts;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//Function to get all nft data\nconst getNftTokenData = async () => {\n  try {\n    var root = {\n      data:{\n        arr:[]\n      } \n    };\n    let nftData = await getAllNftData();\n    var data = Object.keys(nftData).map((key) => nftData[key]);                                                                    \n    let n = data.length;\n    for (let i = 0; i < n; i++) {\n      let val = await axios.header(\"Access-Control-Allow-Origin: *\").get(data[i].data.uri);\n      root.data.arr.push(val);\n    }\n\n    allNftData = root.data;\n    console.log(allNftData);\n    return root.data.arr;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst NFT = async (props) => {\n  const [nftData, setNftData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  createConnection();\n  getProvider();\nuseEffect(() => {\n    async function data() {\n      let res = await getAllNftData();\n      setNftData(res);\n      setLoading(true);\n      getNftTokenData();\n    }\n    data();\n  }, []);\n}\n  \n  useEffect( () => {\n   setProvider(publicKey);\n  }, []);\n  useEffect( () => {\n    setProvider(publicKey);\n   }, []);\n\n   useEffect(function () {    \n    unityContext.on(\"NFT\", function () {\n      if (window.solana.isConnected) {\n        console.log(JSON.stringify(allNftData));\n\n        unityContext.send(\"SolanaWalletConnect\", \"SetNFTData\", JSON.stringify(allNftData));\n      } else {\n        getProvider().then(provider => {\n          console.log('key', provider.publicKey.toString());\n          publicKey = provider.publicKey.toString();\n          setProvider(provider.publicKey.toString());\n        }).then(() => {\n          letsgo();\n        }).catch(function(error){\n          console.log(error)\n        });\n      }\n    });\n  }, []);\n\n  useEffect(function () {    \n    unityContext.on(\"Logout\", function () {\n      if (window.solana.isConnected) {\n        window.solana.disconnect();\n      }\n    });\n  }, []);\n\n  useEffect(function () {\n    unityContext.on(\"progress\", function (progression) {\n      console.log(\"progress\");\n      setProgression(progression);\n    });\n  }, []);\n\n\n  useEffect(function () {\n    unityContext.on(\"loaded\", function () {\n      console.log(\"loaded\");\n      setIsLoaded(true);\n    });\n  }, []);\n\n  return (\n\n  <div style = {{\n    visibility: isLoaded ? \"hidden\" : \"visible\",\n    backgroundImage: `url(${background})`,\n      backgroundSize: \"cover\",\n      height: \"100%\",\n      width: \"100%\",\n      color: \"#f5f5f5\",\n    position: 'absolute',\n    left: 0,\n    top: 0,\n\n    \n  }}>\n   <div>\n  <ProgressBar variant=\"success\" now={progression * 100}\n  style={{ visibility: isLoaded ? \"hidden\" : \"visible\",\n  height: \"10px\",\n  width: \"100%\",\n  position: \"absolute\",\n  bottom: 0,\n  color: \"red\",\n  }}\n  \n  />\n  \n    </div>\n    \n   <p\n    style={{ visibility: isLoaded ? \"hidden\" : \"visible\",\n    height: \"30px\",\n    width: \"100%\",\n    position: \"absolute\",\n    textAlign: 'center',\n    bottom: \"100px\",\n    fontSize: \"2em\",\n    fontColor: \"red\",\n\n    \n \n    }}>Loading...</p>\n   \n   <div>\n   <Unity\n      style={{ visibility: isLoaded ? \"visible\" : \"hidden\",\n        height: \"100%\",\n        width: \"100%\",\n        background: \"grey\",\n        position: 'absolute',\n        left: 0,\n        top: 0,\n        overflow: \"hidden\",\n     \n    }}\n      unityContext={unityContext}\n    />\n    </div>\n    </div>\n  );\n\n  }\n  \nexport default App"]},"metadata":{},"sourceType":"module"}