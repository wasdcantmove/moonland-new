{"ast":null,"code":"var _jsxFileName = \"/Users/liam/react-moonland/src/App.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Unity, { UnityContext } from \"react-unity-webgl\";\nimport background from \"./background.png\";\nimport axios from \"axios\";\nimport { Connection, clusterApiUrl } from \"@solana/web3.js\";\nimport { getParsedNftAccountsByOwner, isValidSolanaAddress, createConnectionConfig } from \"@nfteyez/sol-rayz\";\nimport './App.css';\nimport { initializeApp } from \"firebase/app\";\nimport { getAnalytics } from \"firebase/analytics\";\nvar publicKey;\nvar allNftData; // var loc = window.location.href+'';\n// if (loc.indexOf('http://')==0){\n//   window.location.href = loc.replace('http://','https://');\n// }\n\nconst unityContext = new UnityContext({\n  loaderUrl: \"./Build/public.loader.js\",\n  dataUrl: \"./Build/public.data\",\n  frameworkUrl: \"./Build/public.framework.js\",\n  codeUrl: \"./Build/public.wasm\"\n});\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDcvry5_ArzMtQPFKAqawHgnAZuBusa_Ws\",\n  authDomain: \"moonland-8788b.firebaseapp.com\",\n  projectId: \"moonland-8788b\",\n  storageBucket: \"moonland-8788b.appspot.com\",\n  messagingSenderId: \"533308612802\",\n  appId: \"1:533308612802:web:2f02128e0d471808d3db5b\",\n  measurementId: \"G-GQHPLJ7Y5M\"\n};\nconst app = initializeApp(firebaseConfig);\nconst analytics = getAnalytics(app);\n\nfunction App() {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [progression, setProgression] = useState(0);\n  const [provider, setProvider] = useState(\"\");\n\n  const getProvider = async () => {\n    if (\"solana\" in window) {\n      await window.solana.connect();\n      const provider = window.solana;\n\n      if (provider.isPhantom) {\n        return provider;\n      }\n    } else {\n      window.alert('Install https://www.phantom.app/');\n    }\n  };\n\n  async function letsgo() {\n    createConnection();\n    getProvider();\n\n    async function data() {\n      let res = await getAllNftData();\n      getNftTokenData();\n    }\n\n    data();\n  } //create a connection\n\n\n  const createConnection = () => {\n    // return new Connection(clusterApiUrl(\"devnet\"));\n    return new Connection(\"https://solana-api.projectserum.com/\", {\n      headers: {\n        \"Access-Control-Allow-Origin\": \"*\",\n        \"Access-Control-Request-Headers\": \"*\",\n        \"Access-Control-Allow-Methods\": \"GET, POST, PATCH, PUT, DELETE, OPTIONS\",\n        \"Access-Control-Allow-Headers\": \"Origin, Content-Type\"\n      },\n      mode: 'no-cors'\n    }); // Connection(\"https://www.whateverorigin.org/get?url=\" + clusterApiUrl(\"mainnet-beta\"))\n  }; //get NFT\n\n\n  const getAllNftData = async () => {\n    try {\n      const connect = createConnectionConfig(\"https://solana-api.projectserum.com/\", {\n        headers: {\n          \"Access-Control-Allow-Origin\": \"*\",\n          \"Access-Control-Request-Headers\": \"*\",\n          \"Access-Control-Allow-Methods\": \"GET, POST, PATCH, PUT, DELETE, OPTIONS\",\n          \"Access-Control-Allow-Headers\": \"Origin, Content-Type\"\n        },\n        mode: 'no-cors'\n      }); // const connect =  createConnectionConfig(clusterApiUrl(\"devnet\"));\n\n      const provider = getProvider();\n      let ownerToken = publicKey;\n      const result = isValidSolanaAddress(ownerToken);\n      const nfts = await getParsedNftAccountsByOwner({\n        publicAddress: ownerToken,\n        connection: connect,\n        serialization: true\n      });\n      return nfts;\n    } catch (error) {\n      console.log(error);\n    }\n  }; //Function to get all nft data\n\n\n  const getNftTokenData = async () => {\n    try {\n      var root = {\n        data: {\n          arr: []\n        }\n      };\n      let nftData = await getAllNftData();\n      var data = Object.keys(nftData).map(key => nftData[key]);\n      let n = data.length;\n\n      for (let i = 0; i < n; i++) {\n        let val = await axios.get(data[i].data.uri, {\n          statusCode: 200,\n          headers: {// \"Access-Control-Allow-Origin\":\"*\",\n            // \"Access-Control-Request-Headers\":\"*\",\n            // \"Access-Control-Allow-Methods\": \"GET, POST, PATCH, PUT, DELETE, OPTIONS\",\n            // \"Access-Control-Allow-Headers\": \"Origin, Content-Type\"\n          },\n          mode: 'no-cors'\n        });\n        root.data.arr.push(val);\n        let newJson = JSON.parse(JSON.stringify(root.data), (key, value) => {\n          if (typeof value === 'number') {\n            return value.toString();\n          }\n\n          if (typeof value === 'boolean') {\n            return value.toString();\n          }\n\n          return value;\n        });\n        allNftData = newJson; // console.log(allNftData);\n\n        console.log(i);\n        unityContext.send(\"SolanaWalletConnect\", \"SetNFTData\", JSON.stringify(allNftData));\n      }\n\n      console.log(\"Finished Loading NFTs\");\n      console.log(JSON.stringify(allNftData)); // unityContext.send(\"SolanaWalletConnect\", \"SetNFTData\", JSON.stringify(allNftData));\n\n      return root.data.arr;\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const NFT = async props => {\n    const [nftData, setNftData] = useState([]);\n    const [loading, setLoading] = useState(false);\n    createConnection();\n    getProvider();\n    useEffect(() => {\n      async function data() {\n        let res = await getAllNftData();\n        setNftData(res);\n        setLoading(true);\n        getNftTokenData();\n      }\n\n      data();\n    }, []);\n  };\n\n  useEffect(() => {\n    setProvider(publicKey);\n  }, []);\n  useEffect(() => {\n    setProvider(publicKey);\n  }, []);\n  useEffect(function () {\n    unityContext.on(\"NFT\", function () {\n      if (window.solana.isConnected) {\n        // console.log(JSON.stringify(allNftData));\n        unityContext.send(\"SolanaWalletConnect\", \"SetNFTData\", JSON.stringify(allNftData));\n      } else {\n        getProvider().then(provider => {\n          // console.log('key', provider.publicKey.toString());\n          publicKey = provider.publicKey.toString();\n          setProvider(provider.publicKey.toString());\n        }).then(() => {\n          letsgo();\n        }).catch(function (error) {\n          console.log(error);\n          console.log(\"fail to make connection5\");\n        });\n      }\n    });\n  }, []);\n  useEffect(function () {\n    unityContext.on(\"Logout\", function () {\n      if (window.solana.isConnected) {\n        window.solana.disconnect();\n        window.solana.on('disconnect', () => console.log(\"disconnected!\"));\n        unityContext.send(\"SolanaWalletConnect\", \"Disconnected\");\n      }\n    });\n  }, []);\n  useEffect(function () {\n    unityContext.on(\"progress\", function (progression) {\n      console.log(\"progress\");\n      setProgression(parseFloat(progression).toFixed(2));\n    });\n  }, []);\n  useEffect(function () {\n    unityContext.on(\"loaded\", function () {\n      console.log(\"loaded\");\n      setIsLoaded(true);\n    });\n  }, []);\n  var some = \"0\";\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      visibility: isLoaded ? \"hidden\" : \"visible\",\n      backgroundImage: `url(${background})`,\n      backgroundSize: \"cover\",\n      height: \"100%\",\n      width: \"100%\",\n      color: \"#f5f5f5\",\n      position: 'absolute',\n      left: 0,\n      top: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      visibility: isLoaded ? \"hidden\" : \"visible\",\n      height: \"30px\",\n      width: \"100%\",\n      position: \"absolute\",\n      textAlign: 'center',\n      bottom: \"100px\",\n      fontSize: \"2em\",\n      fontColor: \"red\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 4\n    }\n  }, \"Loading... \", progression * 100, \"%\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(Unity, {\n    style: {\n      visibility: isLoaded ? \"visible\" : \"hidden\",\n      height: \"100%\",\n      width: \"100%\",\n      background: \"grey\",\n      position: 'absolute',\n      left: 0,\n      top: 0,\n      overflow: \"hidden\"\n    },\n    unityContext: unityContext,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 4\n    }\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/liam/react-moonland/src/App.js"],"names":["React","useState","useEffect","Unity","UnityContext","background","axios","Connection","clusterApiUrl","getParsedNftAccountsByOwner","isValidSolanaAddress","createConnectionConfig","initializeApp","getAnalytics","publicKey","allNftData","unityContext","loaderUrl","dataUrl","frameworkUrl","codeUrl","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","analytics","App","isLoaded","setIsLoaded","progression","setProgression","provider","setProvider","getProvider","window","solana","connect","isPhantom","alert","letsgo","createConnection","data","res","getAllNftData","getNftTokenData","headers","mode","ownerToken","result","nfts","publicAddress","connection","serialization","error","console","log","root","arr","nftData","Object","keys","map","key","n","length","i","val","get","uri","statusCode","push","newJson","JSON","parse","stringify","value","toString","send","NFT","props","setNftData","loading","setLoading","on","isConnected","then","catch","disconnect","parseFloat","toFixed","some","visibility","backgroundImage","backgroundSize","height","width","color","position","left","top","textAlign","bottom","fontSize","fontColor","overflow"],"mappings":"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","sourcesContent":["import React, {useState, useEffect } from \"react\";\nimport Unity, { UnityContext } from \"react-unity-webgl\";\nimport background from \"./background.png\";\nimport axios from \"axios\";\nimport { Connection, clusterApiUrl } from \"@solana/web3.js\";\nimport { getParsedNftAccountsByOwner, isValidSolanaAddress, createConnectionConfig} from \"@nfteyez/sol-rayz\";\nimport './App.css';\nimport { initializeApp } from \"firebase/app\";\nimport { getAnalytics } from \"firebase/analytics\";\n\nvar publicKey;\nvar allNftData;\n\n// var loc = window.location.href+'';\n// if (loc.indexOf('http://')==0){\n//   window.location.href = loc.replace('http://','https://');\n// }\n\nconst unityContext = new UnityContext({\n  loaderUrl: \"./Build/public.loader.js\",\n  dataUrl: \"./Build/public.data\",\n  frameworkUrl: \"./Build/public.framework.js\",\n  codeUrl: \"./Build/public.wasm\"\n});\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDcvry5_ArzMtQPFKAqawHgnAZuBusa_Ws\",\n  authDomain: \"moonland-8788b.firebaseapp.com\",\n  projectId: \"moonland-8788b\",\n  storageBucket: \"moonland-8788b.appspot.com\",\n  messagingSenderId: \"533308612802\",\n  appId: \"1:533308612802:web:2f02128e0d471808d3db5b\",\n  measurementId: \"G-GQHPLJ7Y5M\"\n};\n\nconst app = initializeApp(firebaseConfig);\nconst analytics = getAnalytics(app);\n\nfunction App() {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [progression, setProgression] = useState(0);\n  const [provider, setProvider] = useState(\"\");\n\n\n  const getProvider = async () => {\n    if (\"solana\" in window) {\n      await window.solana.connect();\n      const provider = window.solana;\n      if (provider.isPhantom) {\n        return provider;\n      }\n    } else {\n      window.alert('Install https://www.phantom.app/');\n    }\n  };\n\n  async function letsgo() {\n     createConnection();\n     getProvider();\n       async function data() {\n         let res = await getAllNftData();\n         getNftTokenData();\n       }\n       data();\n  }\n\n  //create a connection\nconst createConnection = () => {\n  // return new Connection(clusterApiUrl(\"devnet\"));\n  return new Connection(\"https://solana-api.projectserum.com/\", {\n    headers: {\n      \"Access-Control-Allow-Origin\":\"*\",\n      \"Access-Control-Request-Headers\":\"*\",\n      \"Access-Control-Allow-Methods\": \"GET, POST, PATCH, PUT, DELETE, OPTIONS\",\n      \"Access-Control-Allow-Headers\": \"Origin, Content-Type\"\n    },\n    mode: 'no-cors'\n    })\n  // Connection(\"https://www.whateverorigin.org/get?url=\" + clusterApiUrl(\"mainnet-beta\"))\n};\n\n  //get NFT\n  const getAllNftData = async () => {\n    try {\n      const connect =  createConnectionConfig(\"https://solana-api.projectserum.com/\", {\n        headers: {\n          \"Access-Control-Allow-Origin\":\"*\",\n          \"Access-Control-Request-Headers\":\"*\",\n          \"Access-Control-Allow-Methods\": \"GET, POST, PATCH, PUT, DELETE, OPTIONS\",\n          \"Access-Control-Allow-Headers\": \"Origin, Content-Type\"\n        },\n        mode: 'no-cors'\n        })\n      // const connect =  createConnectionConfig(clusterApiUrl(\"devnet\"));\n      const provider = getProvider();\n      let ownerToken = publicKey;\n      const result = isValidSolanaAddress(ownerToken);\n      const nfts = await getParsedNftAccountsByOwner({\n        publicAddress: ownerToken,\n        connection: connect,\n        serialization: true,\n      });\n      return nfts;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//Function to get all nft data\nconst getNftTokenData = async () => {\n  try {\n    var root = {\n      data:{\n        arr:[]\n      } \n    };\n    let nftData = await getAllNftData();\n    var data = Object.keys(nftData).map((key) => nftData[key]);                                                                    \n    let n = data.length;\n    for (let i = 0; i < n; i++) {\n      let val = await axios.get(data[i].data.uri, {\n          statusCode: 200,\n          headers: {\n            // \"Access-Control-Allow-Origin\":\"*\",\n            // \"Access-Control-Request-Headers\":\"*\",\n            // \"Access-Control-Allow-Methods\": \"GET, POST, PATCH, PUT, DELETE, OPTIONS\",\n            // \"Access-Control-Allow-Headers\": \"Origin, Content-Type\"\n          },\n          mode: 'no-cors'\n      }\n      );\n      root.data.arr.push(val);\n      let newJson = JSON.parse(JSON.stringify(root.data), (key, value) => {\n        if (typeof value === 'number') {\n          return value.toString();\n        }\n        if (typeof value === 'boolean') {\n          return value.toString();\n        }\n        return value;\n      });\n      allNftData = newJson;\n      // console.log(allNftData);\n      console.log(i);\n      unityContext.send(\"SolanaWalletConnect\", \"SetNFTData\", JSON.stringify(allNftData));\n    }\n    console.log(\"Finished Loading NFTs\");\n    console.log(JSON.stringify(allNftData));\n    // unityContext.send(\"SolanaWalletConnect\", \"SetNFTData\", JSON.stringify(allNftData));\n    return root.data.arr;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst NFT = async (props) => {\n  const [nftData, setNftData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  createConnection();\n  getProvider();\nuseEffect(() => {\n    async function data() {\n      let res = await getAllNftData();\n      setNftData(res);\n      setLoading(true);\n      getNftTokenData();\n    }\n    data();\n  }, []);\n}\n  \n  useEffect( () => {\n   setProvider(publicKey);\n  }, []);\n  useEffect( () => {\n    setProvider(publicKey);\n   }, []);\n\n   useEffect(function () {    \n    unityContext.on(\"NFT\", function () {\n      if (window.solana.isConnected) {\n        // console.log(JSON.stringify(allNftData));\n\n        unityContext.send(\"SolanaWalletConnect\", \"SetNFTData\", JSON.stringify(allNftData));\n      } else {\n        getProvider().then(provider => {\n          // console.log('key', provider.publicKey.toString());\n          publicKey = provider.publicKey.toString();\n          setProvider(provider.publicKey.toString());\n        }).then(() => {\n          letsgo();\n        }).catch(function(error){\n          console.log(error)\n          console.log(\"fail to make connection5\");\n        });\n      }\n    });\n  }, []);\n\n  useEffect(function () {    \n    unityContext.on(\"Logout\", function () {\n      if (window.solana.isConnected) {\n        window.solana.disconnect();\n        window.solana.on('disconnect', () => console.log(\"disconnected!\"))\n        unityContext.send(\"SolanaWalletConnect\", \"Disconnected\");\n      }\n    });\n  }, []);\n\n  useEffect(function () {\n    unityContext.on(\"progress\", function (progression) {\n      console.log(\"progress\");\n      setProgression(parseFloat(progression).toFixed(2));\n    });\n  }, []);\n\n\n  useEffect(function () {\n    unityContext.on(\"loaded\", function () {\n      console.log(\"loaded\");\n      setIsLoaded(true);\n    });\n  }, []);\n\nvar some = \"0\";\n  return (\n\n  <div style = {{\n    visibility: isLoaded ? \"hidden\" : \"visible\",\n    backgroundImage: `url(${background})`,\n      backgroundSize: \"cover\",\n      height: \"100%\",\n      width: \"100%\",\n      color: \"#f5f5f5\",\n    position: 'absolute',\n    left: 0,\n    top: 0,\n  }}>\n\n   <p\n    style={{ visibility: isLoaded ? \"hidden\" : \"visible\",\n    height: \"30px\",\n    width: \"100%\",\n    position: \"absolute\",\n    textAlign: 'center',\n    bottom: \"100px\",\n    fontSize: \"2em\",\n    fontColor: \"red\",\n\n    \n \n    }}>Loading... {progression * 100}%</p>\n\n    \n   \n   <div>\n   <Unity\n      style={{ visibility: isLoaded ? \"visible\" : \"hidden\",\n        height: \"100%\",\n        width: \"100%\",\n        background: \"grey\",\n        position: 'absolute',\n        left: 0,\n        top: 0,\n        overflow: \"hidden\",\n     \n    }}\n      unityContext={unityContext}\n    />\n    </div>\n    </div>\n  );\n\n  }\n\n  \n  \nexport default App"]},"metadata":{},"sourceType":"module"}