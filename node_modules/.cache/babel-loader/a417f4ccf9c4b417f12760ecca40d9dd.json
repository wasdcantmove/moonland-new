{"ast":null,"code":"var _jsxFileName = \"/Users/liam/react-moonland/src/App.js\";\nimport styles from './App.css';\nimport React, { useState, useEffect } from \"react\";\nimport Unity, { UnityContext } from \"react-unity-webgl\";\nimport * as solanaWeb3 from '@solana/web3.js';\nimport parse from 'html-react-parser';\nimport background from \"./background.png\";\nimport ProgressBar from 'react-bootstrap/Button';\nimport reactDom from 'react-dom';\nimport axios from \"axios\";\nimport { Connection, clusterApiUrl, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\nimport { getParsedNftAccountsByOwner, isValidSolanaAddress, createConnectionConfig } from \"@nfteyez/sol-rayz\";\nimport './App.css';\nvar publicKey;\nvar allNftData;\nconst unityContext = new UnityContext({\n  loaderUrl: \"./Build/public.loader.js\",\n  dataUrl: \"./Build/public.data\",\n  frameworkUrl: \"./Build/public.framework.js\",\n  codeUrl: \"./Build/public.wasm\"\n});\n\nfunction App() {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [progression, setProgression] = useState(0);\n  const [provider, setProvider] = useState(\"\");\n\n  const getProvider = async () => {\n    if (\"solana\" in window) {\n      await window.solana.connect(); // opens wallet to connect to\n\n      const provider = window.solana;\n\n      if (provider.isPhantom) {\n        console.log(\"Is Phantom installed?  \", provider.isPhantom);\n        console.log(\"Are we connected?  \", provider.isConnected);\n        console.log(\"And our key?  \", provider.publicKey.toString());\n        return provider;\n      }\n    } else {\n      window.alert('Install https://www.phantom.app/');\n    }\n  }; // window.onload = () => {\n  //   getProvider().then(provider => {\n  //     console.log('key', provider.publicKey.toString());\n  //     publicKey = provider.publicKey.toString();\n  //     setProvider(provider.publicKey.toString());\n  //   }).then(() => {\n  //     letsgo();\n  //   }).catch(function(error){\n  //     console.log(error)\n  //   });\n  // }\n\n\n  async function letsgo() {\n    createConnection();\n    getProvider();\n\n    async function data() {\n      let res = await getAllNftData();\n      getNftTokenData();\n    }\n\n    data();\n  } //create a connection\n\n\n  const createConnection = () => {\n    // return new Connection(clusterApiUrl(\"devnet\"));\n    return new Connection(clusterApiUrl(\"mainnet-beta\"));\n  }; //get NFT\n\n\n  const getAllNftData = async () => {\n    try {\n      const connect = createConnectionConfig(clusterApiUrl(\"mainnet-beta\")); // const connect =  createConnectionConfig(clusterApiUrl(\"devnet\"));\n\n      const provider = getProvider();\n      let ownerToken = publicKey;\n      const result = isValidSolanaAddress(ownerToken);\n      const nfts = await getParsedNftAccountsByOwner({\n        publicAddress: ownerToken,\n        connection: connect,\n        serialization: true\n      });\n      return nfts;\n    } catch (error) {\n      console.log(error);\n    }\n  }; //Function to get all nft data\n\n\n  const getNftTokenData = async () => {\n    try {\n      var root = {\n        data: {\n          arr: []\n        }\n      };\n      console.log(root);\n      let nftData = await getAllNftData();\n      var data = Object.keys(nftData).map(key => nftData[key]);\n      let n = data.length;\n\n      for (let i = 0; i < n; i++) {\n        let val = await axios.get(data[i].data.uri);\n        root.data.arr.push(val);\n      }\n\n      allNftData = root.data.arr;\n      console.log(allNftData);\n      return root.data.arr;\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const NFT = async props => {\n    const [nftData, setNftData] = useState([]);\n    const [loading, setLoading] = useState(false);\n    createConnection();\n    getProvider();\n    useEffect(() => {\n      async function data() {\n        let res = await getAllNftData();\n        setNftData(res);\n        setLoading(true);\n        getNftTokenData();\n      }\n\n      data();\n    }, []);\n  };\n\n  useEffect(() => {\n    setProvider(publicKey);\n  }, []);\n  useEffect(() => {\n    setProvider(publicKey);\n  }, []);\n  useEffect(function () {\n    unityContext.on(\"NFT\", function () {\n      if (window.solana.isConnected) {\n        console.log(JSON.stringify(allNftData));\n        unityContext.send(\"SolanaWalletConnect\", \"SetNFTData\", JSON.stringify(allNftData));\n      } else {\n        getProvider().then(provider => {\n          console.log('key', provider.publicKey.toString());\n          publicKey = provider.publicKey.toString();\n          setProvider(provider.publicKey.toString());\n        }).then(() => {\n          letsgo();\n        }).catch(function (error) {\n          console.log(error);\n        });\n      }\n    });\n  }, []);\n  useEffect(function () {\n    unityContext.on(\"progress\", function (progression) {\n      console.log(\"progress\");\n      setProgression(progression);\n    });\n  }, []);\n  useEffect(function () {\n    unityContext.on(\"loaded\", function () {\n      console.log(\"loaded\");\n      setIsLoaded(true);\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      visibility: isLoaded ? \"hidden\" : \"visible\",\n      backgroundImage: `url(${background})`,\n      backgroundSize: \"cover\",\n      height: \"100%\",\n      width: \"100%\",\n      color: \"#f5f5f5\",\n      position: 'absolute',\n      left: 0,\n      top: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(ProgressBar, {\n    variant: \"success\",\n    now: progression * 100,\n    style: {\n      visibility: isLoaded ? \"hidden\" : \"visible\",\n      height: \"10px\",\n      width: \"100%\",\n      position: \"absolute\",\n      bottom: 0,\n      color: \"red\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 3\n    }\n  })), /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      visibility: isLoaded ? \"hidden\" : \"visible\",\n      height: \"30px\",\n      width: \"100%\",\n      position: \"absolute\",\n      textAlign: 'center',\n      bottom: \"100px\",\n      fontSize: \"2em\",\n      fontColor: \"red\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 4\n    }\n  }, \"help me...\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(Unity, {\n    style: {\n      visibility: isLoaded ? \"visible\" : \"hidden\",\n      height: \"100%\",\n      width: \"100%\",\n      background: \"grey\",\n      position: 'absolute',\n      left: 0,\n      top: 0,\n      overflow: \"hidden\"\n    },\n    unityContext: unityContext,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 4\n    }\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/liam/react-moonland/src/App.js"],"names":["styles","React","useState","useEffect","Unity","UnityContext","solanaWeb3","parse","background","ProgressBar","reactDom","axios","Connection","clusterApiUrl","LAMPORTS_PER_SOL","getParsedNftAccountsByOwner","isValidSolanaAddress","createConnectionConfig","publicKey","allNftData","unityContext","loaderUrl","dataUrl","frameworkUrl","codeUrl","App","isLoaded","setIsLoaded","progression","setProgression","provider","setProvider","getProvider","window","solana","connect","isPhantom","console","log","isConnected","toString","alert","letsgo","createConnection","data","res","getAllNftData","getNftTokenData","ownerToken","result","nfts","publicAddress","connection","serialization","error","root","arr","nftData","Object","keys","map","key","n","length","i","val","get","uri","push","NFT","props","setNftData","loading","setLoading","on","JSON","stringify","send","then","catch","visibility","backgroundImage","backgroundSize","height","width","color","position","left","top","bottom","textAlign","fontSize","fontColor","overflow"],"mappings":"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","sourcesContent":["import styles from './App.css';\nimport React, {useState, useEffect } from \"react\";\nimport Unity, { UnityContext } from \"react-unity-webgl\";\nimport * as solanaWeb3 from '@solana/web3.js';\nimport parse from 'html-react-parser';\nimport background from \"./background.png\";\nimport ProgressBar from 'react-bootstrap/Button';\nimport reactDom from 'react-dom';\nimport axios from \"axios\";\nimport { Connection, clusterApiUrl, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\nimport { getParsedNftAccountsByOwner,isValidSolanaAddress, createConnectionConfig,} from \"@nfteyez/sol-rayz\";\nimport './App.css';\n\nvar publicKey;\nvar allNftData;\n\nconst unityContext = new UnityContext({\n  loaderUrl: \"./Build/public.loader.js\",\n  dataUrl: \"./Build/public.data\",\n  frameworkUrl: \"./Build/public.framework.js\",\n  codeUrl: \"./Build/public.wasm\"\n});\n\nfunction App() {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [progression, setProgression] = useState(0);\n  const [provider, setProvider] = useState(\"\");\n\n\n  const getProvider = async () => {\n    if (\"solana\" in window) {\n      await window.solana.connect(); // opens wallet to connect to\n      const provider = window.solana;\n      if (provider.isPhantom) {\n        console.log(\"Is Phantom installed?  \", provider.isPhantom);\n        console.log(\"Are we connected?  \", provider.isConnected);\n        console.log(\"And our key?  \", provider.publicKey.toString());\n        return provider;\n      }\n    } else {\n      window.alert('Install https://www.phantom.app/');\n    }\n  };\n  \n  // window.onload = () => {\n  //   getProvider().then(provider => {\n  //     console.log('key', provider.publicKey.toString());\n  //     publicKey = provider.publicKey.toString();\n  //     setProvider(provider.publicKey.toString());\n  //   }).then(() => {\n  //     letsgo();\n  //   }).catch(function(error){\n  //     console.log(error)\n  //   });\n  // }\n\n  async function letsgo() {\n     createConnection();\n     getProvider();\n       async function data() {\n         let res = await getAllNftData();\n         getNftTokenData();\n       }\n       data();\n  }\n\n  //create a connection\nconst createConnection = () => {\n  // return new Connection(clusterApiUrl(\"devnet\"));\n  return new Connection(clusterApiUrl(\"mainnet-beta\"));\n};\n\n  //get NFT\n  const getAllNftData = async () => {\n    try {\n      const connect =  createConnectionConfig(clusterApiUrl(\"mainnet-beta\"));\n      // const connect =  createConnectionConfig(clusterApiUrl(\"devnet\"));\n      const provider = getProvider();\n      let ownerToken = publicKey;\n      const result = isValidSolanaAddress(ownerToken);\n      const nfts = await getParsedNftAccountsByOwner({\n        publicAddress: ownerToken,\n        connection: connect,\n        serialization: true,\n      });\n      return nfts;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//Function to get all nft data\nconst getNftTokenData = async () => {\n  try {\n    var root = {\n      data:{\n        arr:[]\n      } \n    };\n\n    console.log(root);\n    let nftData = await getAllNftData();\n    var data = Object.keys(nftData).map((key) => nftData[key]);                                                                    \n    let n = data.length;\n    for (let i = 0; i < n; i++) {\n      let val = await axios.get(data[i].data.uri);\n      root.data.arr.push(val);\n    }\n\n    allNftData = root.data.arr;\n    console.log(allNftData);\n    return root.data.arr;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst NFT = async (props) => {\n  const [nftData, setNftData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  createConnection();\n  getProvider();\nuseEffect(() => {\n    async function data() {\n      let res = await getAllNftData();\n      setNftData(res);\n      setLoading(true);\n      getNftTokenData();\n    }\n    data();\n  }, []);\n}\n  \n  useEffect( () => {\n   setProvider(publicKey);\n  }, []);\n  useEffect( () => {\n    setProvider(publicKey);\n   }, []);\n\n   useEffect(function () {    \n    unityContext.on(\"NFT\", function () {\n      if (window.solana.isConnected) {\n        console.log(JSON.stringify(allNftData));\n\n        unityContext.send(\"SolanaWalletConnect\", \"SetNFTData\", JSON.stringify(allNftData));\n      } else {\n        getProvider().then(provider => {\n          console.log('key', provider.publicKey.toString());\n          publicKey = provider.publicKey.toString();\n          setProvider(provider.publicKey.toString());\n        }).then(() => {\n          letsgo();\n        }).catch(function(error){\n          console.log(error)\n        });\n      }\n    });\n  }, []);\n\n  useEffect(function () {\n    unityContext.on(\"progress\", function (progression) {\n      console.log(\"progress\");\n      setProgression(progression);\n    });\n  }, []);\n\n\n  useEffect(function () {\n    unityContext.on(\"loaded\", function () {\n      console.log(\"loaded\");\n      setIsLoaded(true);\n    });\n  }, []);\n\n  return (\n\n  <div style = {{\n    visibility: isLoaded ? \"hidden\" : \"visible\",\n    backgroundImage: `url(${background})`,\n      backgroundSize: \"cover\",\n      height: \"100%\",\n      width: \"100%\",\n      color: \"#f5f5f5\",\n    position: 'absolute',\n    left: 0,\n    top: 0,\n\n    \n  }}>\n   <div>\n  <ProgressBar variant=\"success\" now={progression * 100}\n  style={{ visibility: isLoaded ? \"hidden\" : \"visible\",\n  height: \"10px\",\n  width: \"100%\",\n  position: \"absolute\",\n  bottom: 0,\n  color: \"red\",\n  }}\n  \n  />\n  \n    </div>\n    \n   <p\n    style={{ visibility: isLoaded ? \"hidden\" : \"visible\",\n    height: \"30px\",\n    width: \"100%\",\n    position: \"absolute\",\n    textAlign: 'center',\n    bottom: \"100px\",\n    fontSize: \"2em\",\n    fontColor: \"red\",\n\n    \n \n    }}>help me...</p>\n   \n   <div>\n   <Unity\n      style={{ visibility: isLoaded ? \"visible\" : \"hidden\",\n        height: \"100%\",\n        width: \"100%\",\n        background: \"grey\",\n        position: 'absolute',\n        left: 0,\n        top: 0,\n        overflow: \"hidden\",\n     \n    }}\n      unityContext={unityContext}\n    />\n    </div>\n    </div>\n  );\n\n  }\n  \nexport default App"]},"metadata":{},"sourceType":"module"}