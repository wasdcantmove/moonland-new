{"ast":null,"code":"var _jsxFileName = \"/Users/liam/react-moonland/src/App.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Unity, { UnityContext } from \"react-unity-webgl\";\nimport background from \"./background.png\";\nimport axios from \"axios\";\nimport { Connection, clusterApiUrl } from \"@solana/web3.js\";\nimport { getParsedNftAccountsByOwner, isValidSolanaAddress, createConnectionConfig } from \"@nfteyez/sol-rayz\";\nimport './App.css';\nvar publicKey;\nvar allNftData;\nconst unityContext = new UnityContext({\n  loaderUrl: \"./Build/public.loader.js\",\n  dataUrl: \"./Build/public.data\",\n  frameworkUrl: \"./Build/public.framework.js\",\n  codeUrl: \"./Build/public.wasm\"\n});\n\nfunction App() {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [progression, setProgression] = useState(0);\n  const [provider, setProvider] = useState(\"\");\n\n  const getProvider = async () => {\n    if (\"solana\" in window) {\n      await window.solana.connect();\n      const provider = window.solana;\n\n      if (provider.isPhantom) {\n        return provider;\n      }\n    } else {\n      window.alert('Install https://www.phantom.app/');\n    }\n  };\n\n  async function letsgo() {\n    createConnection();\n    getProvider();\n\n    async function data() {\n      let res = await getAllNftData();\n      getNftTokenData();\n    }\n\n    data();\n  } //create a connection\n\n\n  const createConnection = () => {\n    // return new Connection(clusterApiUrl(\"devnet\"));\n    console.log(\"fail to make connection\");\n    return new Connection(\"https://www.whateverorigin.org/get?url=\" + clusterApiUrl(\"mainnet-beta\"));\n  }; //get NFT\n\n\n  const getAllNftData = async () => {\n    try {\n      const connect = createConnectionConfig(\"https://www.whateverorigin.org/get?url=\" + clusterApiUrl(\"mainnet-beta\")); // const connect =  createConnectionConfig(clusterApiUrl(\"devnet\"));\n\n      const provider = getProvider();\n      let ownerToken = publicKey;\n      const result = isValidSolanaAddress(ownerToken);\n      const nfts = await getParsedNftAccountsByOwner({\n        publicAddress: ownerToken,\n        connection: connect,\n        serialization: true\n      });\n      return nfts;\n    } catch (error) {\n      console.log(\"fail to make connection2\");\n      console.log(error);\n    }\n  }; //Function to get all nft data\n\n\n  const getNftTokenData = async () => {\n    try {\n      var root = {\n        data: {\n          arr: []\n        }\n      };\n      let nftData = await getAllNftData();\n      var data = Object.keys(nftData).map(key => nftData[key]);\n      let n = data.length;\n\n      for (let i = 0; i < n; i++) {\n        let val = await axios.get(\"https://www.whateverorigin.org/get?url=\" + data[i].data.uri, function (req, res) {\n          var res = {\n            \"statusCode\": 200,\n            \"headers\": {\n              \"Access-Control-Allow-Origin\": \"*\"\n            },\n            \"body\": JSON.stringify(val.data),\n            \"isBase64Encoded\": false\n          };\n        });\n        console.log(\"fail to make connection3\");\n        root.data.arr.push(val);\n      }\n\n      allNftData = root.data; // console.log(JSON.stringify(allNftData));\n\n      unityContext.send(\"SolanaWalletConnect\", \"SetNFTData\", JSON.stringify(allNftData)); // console.log(allNftData);\n\n      return root.data.arr;\n    } catch (error) {\n      console.log(error);\n      console.log(\"fail to make connection4\");\n    }\n  };\n\n  const NFT = async props => {\n    const [nftData, setNftData] = useState([]);\n    const [loading, setLoading] = useState(false);\n    createConnection();\n    getProvider();\n    useEffect(() => {\n      async function data() {\n        let res = await getAllNftData();\n        setNftData(res);\n        setLoading(true);\n        getNftTokenData();\n      }\n\n      data();\n    }, []);\n  };\n\n  useEffect(() => {\n    setProvider(publicKey);\n  }, []);\n  useEffect(() => {\n    setProvider(publicKey);\n  }, []);\n  useEffect(function () {\n    unityContext.on(\"NFT\", function () {\n      if (window.solana.isConnected) {\n        // console.log(JSON.stringify(allNftData));\n        unityContext.send(\"SolanaWalletConnect\", \"SetNFTData\", JSON.stringify(allNftData));\n      } else {\n        getProvider().then(provider => {\n          // console.log('key', provider.publicKey.toString());\n          publicKey = provider.publicKey.toString();\n          setProvider(provider.publicKey.toString());\n        }).then(() => {\n          letsgo();\n        }).catch(function (error) {\n          console.log(error);\n          console.log(\"fail to make connection5\");\n        });\n      }\n    });\n  }, []);\n  useEffect(function () {\n    unityContext.on(\"Logout\", function () {\n      if (window.solana.isConnected) {\n        window.solana.disconnect();\n        window.solana.on('disconnect', () => console.log(\"disconnected!\"));\n        unityContext.send(\"SolanaWalletConnect\", \"Disconnected\");\n      }\n    });\n  }, []);\n  useEffect(function () {\n    unityContext.on(\"progress\", function (progression) {\n      console.log(\"progress\");\n      setProgression(parseFloat(progression).toFixed(2));\n    });\n  }, []);\n  useEffect(function () {\n    unityContext.on(\"loaded\", function () {\n      console.log(\"loaded\");\n      setIsLoaded(true);\n    });\n  }, []);\n  var some = \"0\";\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      visibility: isLoaded ? \"hidden\" : \"visible\",\n      backgroundImage: `url(${background})`,\n      backgroundSize: \"cover\",\n      height: \"100%\",\n      width: \"100%\",\n      color: \"#f5f5f5\",\n      position: 'absolute',\n      left: 0,\n      top: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      visibility: isLoaded ? \"hidden\" : \"visible\",\n      height: \"30px\",\n      width: \"100%\",\n      position: \"absolute\",\n      textAlign: 'center',\n      bottom: \"100px\",\n      fontSize: \"2em\",\n      fontColor: \"red\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 4\n    }\n  }, \"Loading... \", progression * 100, \"%\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(Unity, {\n    style: {\n      visibility: isLoaded ? \"visible\" : \"hidden\",\n      height: \"100%\",\n      width: \"100%\",\n      background: \"grey\",\n      position: 'absolute',\n      left: 0,\n      top: 0,\n      overflow: \"hidden\"\n    },\n    unityContext: unityContext,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 4\n    }\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/liam/react-moonland/src/App.js"],"names":["React","useState","useEffect","Unity","UnityContext","background","axios","Connection","clusterApiUrl","getParsedNftAccountsByOwner","isValidSolanaAddress","createConnectionConfig","publicKey","allNftData","unityContext","loaderUrl","dataUrl","frameworkUrl","codeUrl","App","isLoaded","setIsLoaded","progression","setProgression","provider","setProvider","getProvider","window","solana","connect","isPhantom","alert","letsgo","createConnection","data","res","getAllNftData","getNftTokenData","console","log","ownerToken","result","nfts","publicAddress","connection","serialization","error","root","arr","nftData","Object","keys","map","key","n","length","i","val","get","uri","req","JSON","stringify","push","send","NFT","props","setNftData","loading","setLoading","on","isConnected","then","toString","catch","disconnect","parseFloat","toFixed","some","visibility","backgroundImage","backgroundSize","height","width","color","position","left","top","textAlign","bottom","fontSize","fontColor","overflow"],"mappings":"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","sourcesContent":["import React, {useState, useEffect } from \"react\";\nimport Unity, { UnityContext } from \"react-unity-webgl\";\nimport background from \"./background.png\";\nimport axios from \"axios\";\nimport { Connection, clusterApiUrl } from \"@solana/web3.js\";\nimport { getParsedNftAccountsByOwner,isValidSolanaAddress, createConnectionConfig,} from \"@nfteyez/sol-rayz\";\nimport './App.css';\n\nvar publicKey;\nvar allNftData;\n\nconst unityContext = new UnityContext({\n  loaderUrl: \"./Build/public.loader.js\",\n  dataUrl: \"./Build/public.data\",\n  frameworkUrl: \"./Build/public.framework.js\",\n  codeUrl: \"./Build/public.wasm\"\n});\n\nfunction App() {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [progression, setProgression] = useState(0);\n  const [provider, setProvider] = useState(\"\");\n\n\n  const getProvider = async () => {\n    if (\"solana\" in window) {\n      await window.solana.connect();\n      const provider = window.solana;\n      if (provider.isPhantom) {\n        return provider;\n      }\n    } else {\n      window.alert('Install https://www.phantom.app/');\n    }\n  };\n\n  async function letsgo() {\n     createConnection();\n     getProvider();\n       async function data() {\n         let res = await getAllNftData();\n         getNftTokenData();\n       }\n       data();\n  }\n\n  //create a connection\nconst createConnection = () => {\n  // return new Connection(clusterApiUrl(\"devnet\"));\n  console.log(\"fail to make connection\");\n  return new Connection(\"https://www.whateverorigin.org/get?url=\" + clusterApiUrl(\"mainnet-beta\"));\n};\n\n  //get NFT\n  const getAllNftData = async () => {\n    try {\n      const connect =  createConnectionConfig(\"https://www.whateverorigin.org/get?url=\" + clusterApiUrl(\"mainnet-beta\"));\n      // const connect =  createConnectionConfig(clusterApiUrl(\"devnet\"));\n      const provider = getProvider();\n      let ownerToken = publicKey;\n      const result = isValidSolanaAddress(ownerToken);\n      const nfts = await getParsedNftAccountsByOwner({\n        publicAddress: ownerToken,\n        connection: connect,\n        serialization: true,\n      });\n      return nfts;\n  } catch (error) {\n    console.log(\"fail to make connection2\");\n    console.log(error);\n  }\n};\n\n//Function to get all nft data\nconst getNftTokenData = async () => {\n  try {\n    var root = {\n      data:{\n        arr:[]\n      } \n    };\n    let nftData = await getAllNftData();\n    var data = Object.keys(nftData).map((key) => nftData[key]);                                                                    \n    let n = data.length;\n    for (let i = 0; i < n; i++) {\n      let val = await axios.get(\"https://www.whateverorigin.org/get?url=\" + data[i].data.uri, function (req, res) {\n        var res = {\n          \"statusCode\": 200,\n          \"headers\": {\n              \"Access-Control-Allow-Origin\":\"*\"\n          },\n          \"body\": (JSON.stringify(val.data)),\n          \"isBase64Encoded\": false\n      };\n      }\n      );\n      console.log(\"fail to make connection3\");\n      root.data.arr.push(val);\n    }\n\n    allNftData = root.data;\n    // console.log(JSON.stringify(allNftData));\n    unityContext.send(\"SolanaWalletConnect\", \"SetNFTData\", JSON.stringify(allNftData));\n    // console.log(allNftData);\n    return root.data.arr;\n  } catch (error) {\n    console.log(error);\n    console.log(\"fail to make connection4\");\n  }\n};\n\nconst NFT = async (props) => {\n  const [nftData, setNftData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  createConnection();\n  getProvider();\nuseEffect(() => {\n    async function data() {\n      let res = await getAllNftData();\n      setNftData(res);\n      setLoading(true);\n      getNftTokenData();\n    }\n    data();\n  }, []);\n}\n  \n  useEffect( () => {\n   setProvider(publicKey);\n  }, []);\n  useEffect( () => {\n    setProvider(publicKey);\n   }, []);\n\n   useEffect(function () {    \n    unityContext.on(\"NFT\", function () {\n      if (window.solana.isConnected) {\n        // console.log(JSON.stringify(allNftData));\n\n        unityContext.send(\"SolanaWalletConnect\", \"SetNFTData\", JSON.stringify(allNftData));\n      } else {\n        getProvider().then(provider => {\n          // console.log('key', provider.publicKey.toString());\n          publicKey = provider.publicKey.toString();\n          setProvider(provider.publicKey.toString());\n        }).then(() => {\n          letsgo();\n        }).catch(function(error){\n          console.log(error)\n          console.log(\"fail to make connection5\");\n        });\n      }\n    });\n  }, []);\n\n  useEffect(function () {    \n    unityContext.on(\"Logout\", function () {\n      if (window.solana.isConnected) {\n        window.solana.disconnect();\n        window.solana.on('disconnect', () => console.log(\"disconnected!\"))\n        unityContext.send(\"SolanaWalletConnect\", \"Disconnected\");\n      }\n    });\n  }, []);\n\n  useEffect(function () {\n    unityContext.on(\"progress\", function (progression) {\n      console.log(\"progress\");\n      setProgression(parseFloat(progression).toFixed(2));\n    });\n  }, []);\n\n\n  useEffect(function () {\n    unityContext.on(\"loaded\", function () {\n      console.log(\"loaded\");\n      setIsLoaded(true);\n    });\n  }, []);\n\nvar some = \"0\";\n  return (\n\n  <div style = {{\n    visibility: isLoaded ? \"hidden\" : \"visible\",\n    backgroundImage: `url(${background})`,\n      backgroundSize: \"cover\",\n      height: \"100%\",\n      width: \"100%\",\n      color: \"#f5f5f5\",\n    position: 'absolute',\n    left: 0,\n    top: 0,\n  }}>\n\n   <p\n    style={{ visibility: isLoaded ? \"hidden\" : \"visible\",\n    height: \"30px\",\n    width: \"100%\",\n    position: \"absolute\",\n    textAlign: 'center',\n    bottom: \"100px\",\n    fontSize: \"2em\",\n    fontColor: \"red\",\n\n    \n \n    }}>Loading... {progression * 100}%</p>\n\n    \n   \n   <div>\n   <Unity\n      style={{ visibility: isLoaded ? \"visible\" : \"hidden\",\n        height: \"100%\",\n        width: \"100%\",\n        background: \"grey\",\n        position: 'absolute',\n        left: 0,\n        top: 0,\n        overflow: \"hidden\",\n     \n    }}\n      unityContext={unityContext}\n    />\n    </div>\n    </div>\n  );\n\n  }\n\n  \n  \nexport default App"]},"metadata":{},"sourceType":"module"}