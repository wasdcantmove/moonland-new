{"ast":null,"code":"var _jsxFileName = \"/Users/liam/react-moonland/src/App.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Unity, { UnityContext } from \"react-unity-webgl\";\nimport background from \"./background.png\";\nimport axios from \"axios\";\nimport { Connection, clusterApiUrl } from \"@solana/web3.js\";\nimport { getParsedNftAccountsByOwner, isValidSolanaAddress, createConnectionConfig } from \"@nfteyez/sol-rayz\";\nimport './App.css';\nvar publicKey;\nvar allNftData; // var loc = window.location.href+'';\n// if (loc.indexOf('http://')==0){\n// window.location.href = loc.replace('http://','https://');\n// }\n\nconst unityContext = new UnityContext({\n  loaderUrl: \"./Build/public.loader.js\",\n  dataUrl: \"./Build/public.data\",\n  frameworkUrl: \"./Build/public.framework.js\",\n  codeUrl: \"./Build/public.wasm\"\n});\n\nfunction App() {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [progression, setProgression] = useState(0);\n  const [provider, setProvider] = useState(\"\");\n\n  const getProvider = async () => {\n    if (\"solana\" in window) {\n      await window.solana.connect();\n      const provider = window.solana;\n\n      if (provider.isPhantom) {\n        return provider;\n      }\n    } else {\n      window.alert('Install https://www.phantom.app/');\n    }\n  };\n\n  async function letsgo() {\n    createConnection();\n    getProvider();\n\n    async function data() {\n      let res = await getAllNftData();\n      getNftTokenData();\n    }\n\n    data();\n  } //create a connection\n\n\n  const createConnection = () => {\n    // return new Connection(clusterApiUrl(\"devnet\"));\n    return new Connection(\"https://solana-api.projectserum.com/\", {\n      headers: {\n        \"Access-Control-Allow-Origin\": \"*\",\n        \"Access-Control-Request-Headers\": \"*\",\n        \"Access-Control-Allow-Methods\": \"GET, POST, PATCH, PUT, DELETE, OPTIONS\",\n        \"Access-Control-Allow-Headers\": \"Origin, Content-Type\"\n      },\n      mode: 'no-cors'\n    }); // Connection(\"https://www.whateverorigin.org/get?url=\" + clusterApiUrl(\"mainnet-beta\"))\n  }; //get NFT\n\n\n  const getAllNftData = async () => {\n    try {\n      const connect = createConnectionConfig(\"https://solana-api.projectserum.com/\", {\n        headers: {\n          \"Access-Control-Allow-Origin\": \"*\",\n          \"Access-Control-Request-Headers\": \"*\",\n          \"Access-Control-Allow-Methods\": \"GET, POST, PATCH, PUT, DELETE, OPTIONS\",\n          \"Access-Control-Allow-Headers\": \"Origin, Content-Type\"\n        },\n        mode: 'no-cors'\n      }); // const connect =  createConnectionConfig(clusterApiUrl(\"devnet\"));\n\n      const provider = getProvider();\n      let ownerToken = publicKey;\n      const result = isValidSolanaAddress(ownerToken);\n      const nfts = await getParsedNftAccountsByOwner({\n        publicAddress: ownerToken,\n        connection: connect,\n        serialization: true\n      });\n      return nfts;\n    } catch (error) {\n      console.log(error);\n    }\n  }; //Function to get all nft data\n\n\n  const getNftTokenData = async () => {\n    try {\n      var root = {\n        data: {\n          arr: []\n        }\n      };\n      let nftData = await getAllNftData();\n      var data = Object.keys(nftData).map(key => nftData[key]);\n      let n = data.length;\n\n      for (let i = 0; i < n; i++) {\n        let val = await axios.get(data[i].data.uri, {\n          statusCode: 200,\n          headers: {// \"Access-Control-Allow-Origin\":\"*\",\n            // \"Access-Control-Request-Headers\":\"*\",\n            // \"Access-Control-Allow-Methods\": \"GET, POST, PATCH, PUT, DELETE, OPTIONS\",\n            // \"Access-Control-Allow-Headers\": \"Origin, Content-Type\"\n          },\n          mode: 'no-cors'\n        });\n        root.data.arr.push(val);\n      }\n\n      let somJson = JSON.stringify({\n        \"arr\": [{\n          \"data\": {\n            \"name\": \"War Monkey #3654\",\n            \"symbol\": \"War Monkey\",\n            \"description\": \"War Monkeys by Warzone. A collection of 5000 sophisticated monkey exoskeletons that house the legendary fighters of the SOL chain. Carrying them into battle alongside their new, war hungry allies, the Warzone FREAKZ.\",\n            \"seller_fee_basis_points\": 0,\n            \"image\": \"https://ipfs.io/ipfs/QmQFGTV8HSHPvHy4XdaJAymGWPVer8ecwyzFhE91E9Vttn\",\n            \"external_url\": \"http://w4r.zone/\",\n            \"collection\": {\n              \"name\": \"War Monkey\",\n              \"family\": \"War Monkey\"\n            },\n            \"attributes\": [{\n              \"trait_type\": \"Attributes Count\",\n              \"value\": 2\n            }, {\n              \"trait_type\": \"Type\",\n              \"value\": \"Orange\"\n            }, {\n              \"trait_type\": \"Clothes\",\n              \"value\": \"Green Shirt\"\n            }, {\n              \"trait_type\": \"Ears\",\n              \"value\": \"None\"\n            }, {\n              \"trait_type\": \"Mouth\",\n              \"value\": \"None\"\n            }, {\n              \"trait_type\": \"Eyes\",\n              \"value\": \"None\"\n            }, {\n              \"trait_type\": \"Hat\",\n              \"value\": \"White Fedora 2\"\n            }],\n            \"properties\": {\n              \"files\": {\n                \"uri\": \"https://ipfs.io/ipfs/QmQFGTV8HSHPvHy4XdaJAymGWPVer8ecwyzFhE91E9Vttn\",\n                \"type\": \"image/jpeg\"\n              },\n              \"category\": \"image\",\n              \"creators\": [{\n                \"address\": \"D1oLzEg4X4928QPjnLoY2XrDNNoRjCiGUMsQUiF7Q8n3\",\n                \"verified\": true,\n                \"share\": 100\n              }]\n            }\n          },\n          \"status\": 200,\n          \"statusText\": \"\",\n          \"headers\": {\n            \"cache-control\": \"public, max-age=29030400, immutable\",\n            \"content-type\": \"application/json\",\n            \"last-modified\": \"Thu, 01 Jan 1970 00:00:01 GMT\"\n          },\n          \"config\": {\n            \"url\": \"https://ipfs.io/ipfs/QmexGV5dX5mzYk2BpZGcbRW1sVz3bYGVuxAwLEVgHAXFK5\",\n            \"method\": \"get\",\n            \"headers\": {\n              \"Accept\": \"application/json, text/plain, */*\"\n            },\n            \"transformRequest\": [null],\n            \"transformResponse\": [null],\n            \"timeout\": 0,\n            \"xsrfCookieName\": \"XSRF-TOKEN\",\n            \"xsrfHeaderName\": \"X-XSRF-TOKEN\",\n            \"maxContentLength\": -1,\n            \"maxBodyLength\": -1,\n            \"transitional\": {\n              \"silentJSONParsing\": true,\n              \"forcedJSONParsing\": true,\n              \"clarifyTimeoutError\": false\n            },\n            \"statusCode\": 200,\n            \"mode\": \"no-cors\"\n          },\n          \"request\": {}\n        }, {\n          \"data\": {\n            \"name\": \"SMB #3654\",\n            \"symbol\": \"NFTPro\",\n            \"description\": \"SMB #3654\",\n            \"seller_fee_basis_points\": 0,\n            \"image\": \"https://www.arweave.net/GbMTTNqqbkK3Nr3JpmVJPzHcjmCBo12cGVA4uL1z-e0?ext=PNG\",\n            \"attributes\": [],\n            \"properties\": {\n              \"files\": [{\n                \"uri\": \"https://www.arweave.net/jfLTjY-tEmb-aLx9lCmh_i9ugd7gXkLR7asDm2z4j4E?ext=PNG\",\n                \"type\": \"image/png\"\n              }],\n              \"category\": \"image\",\n              \"creators\": [{\n                \"address\": \"GqRsL4895MDtiSBDehZF6uScbmwzv2YsBJYGH8QBh7dR\",\n                \"verified\": true,\n                \"share\": 100\n              }]\n            }\n          },\n          \"status\": 200,\n          \"statusText\": \"\",\n          \"headers\": {\n            \"cache-control\": \"public,must-revalidate,max-age=864000\",\n            \"content-length\": \"443\",\n            \"content-type\": \"application/json; charset=utf-8\"\n          },\n          \"config\": {\n            \"url\": \"https://www.arweave.net/RbzbvrX2KV2o-31l8fdQPUw-0ji3bKzLc4PqrIGw4mA?ext=json\",\n            \"method\": \"get\",\n            \"headers\": {\n              \"Accept\": \"application/json, text/plain, */*\"\n            },\n            \"transformRequest\": [null],\n            \"transformResponse\": [null],\n            \"timeout\": 0,\n            \"xsrfCookieName\": \"XSRF-TOKEN\",\n            \"xsrfHeaderName\": \"X-XSRF-TOKEN\",\n            \"maxContentLength\": -1,\n            \"maxBodyLength\": -1,\n            \"transitional\": {\n              \"silentJSONParsing\": true,\n              \"forcedJSONParsing\": true,\n              \"clarifyTimeoutError\": false\n            },\n            \"statusCode\": 200,\n            \"mode\": \"no-cors\"\n          },\n          \"request\": {}\n        }]\n      });\n      somJson.replace(/:(\\d+)([,\\}])/g, ':\"$1\"$2');\n      console.log(somJson);\n      allNftData = root.data; // console.log(JSON.stringify(allNftData));\n\n      unityContext.send(\"SolanaWalletConnect\", \"SetNFTData\", JSON.stringify(allNftData));\n      return root.data.arr;\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  function convertNumbers(jsonArray) {\n    const stringifyNumbers = obj => {\n      const result = {};\n      jsonArray.entries(obj).map(entry => {\n        const type = typeof entry[1];\n\n        if (Array.isArray(entry[1])) {\n          result[entry[0]] = entry[1].map(entry => stringifyNumbers(entry));\n        } else if (type === 'object' && !!entry[1]) {\n          result[entry[0]] = stringifyNumbers(entry[1]);\n        } else if (entry[1] === null) {\n          result[entry[0]] = null;\n        } else if (type === 'number') {\n          result[entry[0]] = String(entry[1]);\n        } else {\n          result[entry[0]] = entry[1];\n        }\n      });\n      return result;\n    };\n  }\n\n  const NFT = async props => {\n    const [nftData, setNftData] = useState([]);\n    const [loading, setLoading] = useState(false);\n    createConnection();\n    getProvider();\n    useEffect(() => {\n      async function data() {\n        let res = await getAllNftData();\n        setNftData(res);\n        setLoading(true);\n        getNftTokenData();\n      }\n\n      data();\n    }, []);\n  };\n\n  useEffect(() => {\n    setProvider(publicKey);\n  }, []);\n  useEffect(() => {\n    setProvider(publicKey);\n  }, []);\n  useEffect(function () {\n    unityContext.on(\"NFT\", function () {\n      if (window.solana.isConnected) {\n        // console.log(JSON.stringify(allNftData));\n        unityContext.send(\"SolanaWalletConnect\", \"SetNFTData\", JSON.stringify(allNftData));\n      } else {\n        getProvider().then(provider => {\n          // console.log('key', provider.publicKey.toString());\n          publicKey = provider.publicKey.toString();\n          setProvider(provider.publicKey.toString());\n        }).then(() => {\n          letsgo();\n        }).catch(function (error) {\n          console.log(error);\n          console.log(\"fail to make connection5\");\n        });\n      }\n    });\n  }, []);\n  useEffect(function () {\n    unityContext.on(\"Logout\", function () {\n      if (window.solana.isConnected) {\n        window.solana.disconnect();\n        window.solana.on('disconnect', () => console.log(\"disconnected!\"));\n        unityContext.send(\"SolanaWalletConnect\", \"Disconnected\");\n      }\n    });\n  }, []);\n  useEffect(function () {\n    unityContext.on(\"progress\", function (progression) {\n      console.log(\"progress\");\n      setProgression(parseFloat(progression).toFixed(2));\n    });\n  }, []);\n  useEffect(function () {\n    unityContext.on(\"loaded\", function () {\n      console.log(\"loaded\");\n      setIsLoaded(true);\n    });\n  }, []);\n  var some = \"0\";\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      visibility: isLoaded ? \"hidden\" : \"visible\",\n      backgroundImage: `url(${background})`,\n      backgroundSize: \"cover\",\n      height: \"100%\",\n      width: \"100%\",\n      color: \"#f5f5f5\",\n      position: 'absolute',\n      left: 0,\n      top: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      visibility: isLoaded ? \"hidden\" : \"visible\",\n      height: \"30px\",\n      width: \"100%\",\n      position: \"absolute\",\n      textAlign: 'center',\n      bottom: \"100px\",\n      fontSize: \"2em\",\n      fontColor: \"red\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 4\n    }\n  }, \"Loading... \", progression * 100, \"%\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(Unity, {\n    style: {\n      visibility: isLoaded ? \"visible\" : \"hidden\",\n      height: \"100%\",\n      width: \"100%\",\n      background: \"grey\",\n      position: 'absolute',\n      left: 0,\n      top: 0,\n      overflow: \"hidden\"\n    },\n    unityContext: unityContext,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 4\n    }\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/liam/react-moonland/src/App.js"],"names":["React","useState","useEffect","Unity","UnityContext","background","axios","Connection","clusterApiUrl","getParsedNftAccountsByOwner","isValidSolanaAddress","createConnectionConfig","publicKey","allNftData","unityContext","loaderUrl","dataUrl","frameworkUrl","codeUrl","App","isLoaded","setIsLoaded","progression","setProgression","provider","setProvider","getProvider","window","solana","connect","isPhantom","alert","letsgo","createConnection","data","res","getAllNftData","getNftTokenData","headers","mode","ownerToken","result","nfts","publicAddress","connection","serialization","error","console","log","root","arr","nftData","Object","keys","map","key","n","length","i","val","get","uri","statusCode","push","somJson","JSON","stringify","replace","send","convertNumbers","jsonArray","stringifyNumbers","obj","entries","entry","type","Array","isArray","String","NFT","props","setNftData","loading","setLoading","on","isConnected","then","toString","catch","disconnect","parseFloat","toFixed","some","visibility","backgroundImage","backgroundSize","height","width","color","position","left","top","textAlign","bottom","fontSize","fontColor","overflow"],"mappings":"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","sourcesContent":["import React, {useState, useEffect } from \"react\";\nimport Unity, { UnityContext } from \"react-unity-webgl\";\nimport background from \"./background.png\";\nimport axios from \"axios\";\nimport { Connection, clusterApiUrl } from \"@solana/web3.js\";\nimport { getParsedNftAccountsByOwner, isValidSolanaAddress, createConnectionConfig} from \"@nfteyez/sol-rayz\";\nimport './App.css';\n\nvar publicKey;\nvar allNftData;\n\n// var loc = window.location.href+'';\n// if (loc.indexOf('http://')==0){\n  // window.location.href = loc.replace('http://','https://');\n// }\n\nconst unityContext = new UnityContext({\n  loaderUrl: \"./Build/public.loader.js\",\n  dataUrl: \"./Build/public.data\",\n  frameworkUrl: \"./Build/public.framework.js\",\n  codeUrl: \"./Build/public.wasm\"\n});\n\nfunction App() {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [progression, setProgression] = useState(0);\n  const [provider, setProvider] = useState(\"\");\n\n\n  const getProvider = async () => {\n    if (\"solana\" in window) {\n      await window.solana.connect();\n      const provider = window.solana;\n      if (provider.isPhantom) {\n        return provider;\n      }\n    } else {\n      window.alert('Install https://www.phantom.app/');\n    }\n  };\n\n  async function letsgo() {\n     createConnection();\n     getProvider();\n       async function data() {\n         let res = await getAllNftData();\n         getNftTokenData();\n       }\n       data();\n  }\n\n  //create a connection\nconst createConnection = () => {\n  // return new Connection(clusterApiUrl(\"devnet\"));\n  return new Connection(\"https://solana-api.projectserum.com/\", {\n    headers: {\n      \"Access-Control-Allow-Origin\":\"*\",\n      \"Access-Control-Request-Headers\":\"*\",\n      \"Access-Control-Allow-Methods\": \"GET, POST, PATCH, PUT, DELETE, OPTIONS\",\n      \"Access-Control-Allow-Headers\": \"Origin, Content-Type\"\n    },\n    mode: 'no-cors'\n    })\n  // Connection(\"https://www.whateverorigin.org/get?url=\" + clusterApiUrl(\"mainnet-beta\"))\n};\n\n  //get NFT\n  const getAllNftData = async () => {\n    try {\n      const connect =  createConnectionConfig(\"https://solana-api.projectserum.com/\", {\n        headers: {\n          \"Access-Control-Allow-Origin\":\"*\",\n          \"Access-Control-Request-Headers\":\"*\",\n          \"Access-Control-Allow-Methods\": \"GET, POST, PATCH, PUT, DELETE, OPTIONS\",\n          \"Access-Control-Allow-Headers\": \"Origin, Content-Type\"\n        },\n        mode: 'no-cors'\n        })\n      // const connect =  createConnectionConfig(clusterApiUrl(\"devnet\"));\n      const provider = getProvider();\n      let ownerToken = publicKey;\n      const result = isValidSolanaAddress(ownerToken);\n      const nfts = await getParsedNftAccountsByOwner({\n        publicAddress: ownerToken,\n        connection: connect,\n        serialization: true,\n      });\n      return nfts;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//Function to get all nft data\nconst getNftTokenData = async () => {\n  try {\n    var root = {\n      data:{\n        arr:[]\n      } \n    };\n    let nftData = await getAllNftData();\n    var data = Object.keys(nftData).map((key) => nftData[key]);                                                                    \n    let n = data.length;\n    for (let i = 0; i < n; i++) {\n      let val = await axios.get(data[i].data.uri, {\n          statusCode: 200,\n          headers: {\n            // \"Access-Control-Allow-Origin\":\"*\",\n            // \"Access-Control-Request-Headers\":\"*\",\n            // \"Access-Control-Allow-Methods\": \"GET, POST, PATCH, PUT, DELETE, OPTIONS\",\n            // \"Access-Control-Allow-Headers\": \"Origin, Content-Type\"\n          },\n          mode: 'no-cors'\n      }\n      );\n      root.data.arr.push(val);\n    }\n    let somJson = JSON.stringify({\n\t\"arr\": [\n\t\t{\n\t\t\t\"data\": {\n\t\t\t\t\"name\": \"War Monkey #3654\",\n\t\t\t\t\"symbol\": \"War Monkey\",\n\t\t\t\t\"description\": \"War Monkeys by Warzone. A collection of 5000 sophisticated monkey exoskeletons that house the legendary fighters of the SOL chain. Carrying them into battle alongside their new, war hungry allies, the Warzone FREAKZ.\",\n\t\t\t\t\"seller_fee_basis_points\": 0,\n\t\t\t\t\"image\": \"https://ipfs.io/ipfs/QmQFGTV8HSHPvHy4XdaJAymGWPVer8ecwyzFhE91E9Vttn\",\n\t\t\t\t\"external_url\": \"http://w4r.zone/\",\n\t\t\t\t\"collection\": {\n\t\t\t\t\t\"name\": \"War Monkey\",\n\t\t\t\t\t\"family\": \"War Monkey\"\n\t\t\t\t},\n\t\t\t\t\"attributes\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"trait_type\": \"Attributes Count\",\n\t\t\t\t\t\t\"value\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"trait_type\": \"Type\",\n\t\t\t\t\t\t\"value\": \"Orange\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"trait_type\": \"Clothes\",\n\t\t\t\t\t\t\"value\": \"Green Shirt\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"trait_type\": \"Ears\",\n\t\t\t\t\t\t\"value\": \"None\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"trait_type\": \"Mouth\",\n\t\t\t\t\t\t\"value\": \"None\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"trait_type\": \"Eyes\",\n\t\t\t\t\t\t\"value\": \"None\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"trait_type\": \"Hat\",\n\t\t\t\t\t\t\"value\": \"White Fedora 2\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"properties\": {\n\t\t\t\t\t\"files\": {\n\t\t\t\t\t\t\"uri\": \"https://ipfs.io/ipfs/QmQFGTV8HSHPvHy4XdaJAymGWPVer8ecwyzFhE91E9Vttn\",\n\t\t\t\t\t\t\"type\": \"image/jpeg\"\n\t\t\t\t\t},\n\t\t\t\t\t\"category\": \"image\",\n\t\t\t\t\t\"creators\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"address\": \"D1oLzEg4X4928QPjnLoY2XrDNNoRjCiGUMsQUiF7Q8n3\",\n\t\t\t\t\t\t\t\"verified\": true,\n\t\t\t\t\t\t\t\"share\": 100\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"status\": 200,\n\t\t\t\"statusText\": \"\",\n\t\t\t\"headers\": {\n\t\t\t\t\"cache-control\": \"public, max-age=29030400, immutable\",\n\t\t\t\t\"content-type\": \"application/json\",\n\t\t\t\t\"last-modified\": \"Thu, 01 Jan 1970 00:00:01 GMT\"\n\t\t\t},\n\t\t\t\"config\": {\n\t\t\t\t\"url\": \"https://ipfs.io/ipfs/QmexGV5dX5mzYk2BpZGcbRW1sVz3bYGVuxAwLEVgHAXFK5\",\n\t\t\t\t\"method\": \"get\",\n\t\t\t\t\"headers\": {\n\t\t\t\t\t\"Accept\": \"application/json, text/plain, */*\"\n\t\t\t\t},\n\t\t\t\t\"transformRequest\": [\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t\"transformResponse\": [\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t\"timeout\": 0,\n\t\t\t\t\"xsrfCookieName\": \"XSRF-TOKEN\",\n\t\t\t\t\"xsrfHeaderName\": \"X-XSRF-TOKEN\",\n\t\t\t\t\"maxContentLength\": -1,\n\t\t\t\t\"maxBodyLength\": -1,\n\t\t\t\t\"transitional\": {\n\t\t\t\t\t\"silentJSONParsing\": true,\n\t\t\t\t\t\"forcedJSONParsing\": true,\n\t\t\t\t\t\"clarifyTimeoutError\": false\n\t\t\t\t},\n\t\t\t\t\"statusCode\": 200,\n\t\t\t\t\"mode\": \"no-cors\"\n\t\t\t},\n\t\t\t\"request\": { }\n\t\t},\n\t\t{\n\t\t\t\"data\": {\n\t\t\t\t\"name\": \"SMB #3654\",\n\t\t\t\t\"symbol\": \"NFTPro\",\n\t\t\t\t\"description\": \"SMB #3654\",\n\t\t\t\t\"seller_fee_basis_points\": 0,\n\t\t\t\t\"image\": \"https://www.arweave.net/GbMTTNqqbkK3Nr3JpmVJPzHcjmCBo12cGVA4uL1z-e0?ext=PNG\",\n\t\t\t\t\"attributes\": [ ],\n\t\t\t\t\"properties\": {\n\t\t\t\t\t\"files\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"uri\": \"https://www.arweave.net/jfLTjY-tEmb-aLx9lCmh_i9ugd7gXkLR7asDm2z4j4E?ext=PNG\",\n\t\t\t\t\t\t\t\"type\": \"image/png\"\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\t\"category\": \"image\",\n\t\t\t\t\t\"creators\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"address\": \"GqRsL4895MDtiSBDehZF6uScbmwzv2YsBJYGH8QBh7dR\",\n\t\t\t\t\t\t\t\"verified\": true,\n\t\t\t\t\t\t\t\"share\": 100\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"status\": 200,\n\t\t\t\"statusText\": \"\",\n\t\t\t\"headers\": {\n\t\t\t\t\"cache-control\": \"public,must-revalidate,max-age=864000\",\n\t\t\t\t\"content-length\": \"443\",\n\t\t\t\t\"content-type\": \"application/json; charset=utf-8\"\n\t\t\t},\n\t\t\t\"config\": {\n\t\t\t\t\"url\": \"https://www.arweave.net/RbzbvrX2KV2o-31l8fdQPUw-0ji3bKzLc4PqrIGw4mA?ext=json\",\n\t\t\t\t\"method\": \"get\",\n\t\t\t\t\"headers\": {\n\t\t\t\t\t\"Accept\": \"application/json, text/plain, */*\"\n\t\t\t\t},\n\t\t\t\t\"transformRequest\": [\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t\"transformResponse\": [\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t\"timeout\": 0,\n\t\t\t\t\"xsrfCookieName\": \"XSRF-TOKEN\",\n\t\t\t\t\"xsrfHeaderName\": \"X-XSRF-TOKEN\",\n\t\t\t\t\"maxContentLength\": -1,\n\t\t\t\t\"maxBodyLength\": -1,\n\t\t\t\t\"transitional\": {\n\t\t\t\t\t\"silentJSONParsing\": true,\n\t\t\t\t\t\"forcedJSONParsing\": true,\n\t\t\t\t\t\"clarifyTimeoutError\": false\n\t\t\t\t},\n\t\t\t\t\"statusCode\": 200,\n\t\t\t\t\"mode\": \"no-cors\"\n\t\t\t},\n\t\t\t\"request\": { }\n\t\t}\n\t]\n}\n)\n  somJson.replace(/:(\\d+)([,\\}])/g, ':\"$1\"$2');\n    console.log(somJson);\n    allNftData = root.data;\n    // console.log(JSON.stringify(allNftData));\n    unityContext.send(\"SolanaWalletConnect\", \"SetNFTData\", JSON.stringify(allNftData));\n    return root.data.arr;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nfunction convertNumbers(jsonArray) {\n  const stringifyNumbers = obj => {                                                                                      \n    const result = {};                                                                                                   \n    jsonArray.entries(obj).map(entry => {                                                                                   \n      const type = typeof entry[1];                                                                                      \n      if (Array.isArray(entry[1])) {                                                                                     \n        result[entry[0]] = entry[1].map(entry => stringifyNumbers(entry));                                               \n      } else if (type === 'object' && !!entry[1]) {                                                                      \n        result[entry[0]] = stringifyNumbers(entry[1]);                                                                   \n      } else if (entry[1] === null) {                                                                                    \n        result[entry[0]] = null;                                                                                         \n      } else if (type === 'number') {                                                                                    \n        result[entry[0]] = String(entry[1]);                                                                             \n      } else {                                                                                                           \n        result[entry[0]] = entry[1];                                                                                     \n      }                                                                                                                  \n    });                                                                                                                  \n    return result;                                                                                                       \n  }   \n}\n\nconst NFT = async (props) => {\n  const [nftData, setNftData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  createConnection();\n  getProvider();\nuseEffect(() => {\n    async function data() {\n      let res = await getAllNftData();\n      setNftData(res);\n      setLoading(true);\n      getNftTokenData();\n    }\n    data();\n  }, []);\n}\n  \n  useEffect( () => {\n   setProvider(publicKey);\n  }, []);\n  useEffect( () => {\n    setProvider(publicKey);\n   }, []);\n\n   useEffect(function () {    \n    unityContext.on(\"NFT\", function () {\n      if (window.solana.isConnected) {\n        // console.log(JSON.stringify(allNftData));\n\n        unityContext.send(\"SolanaWalletConnect\", \"SetNFTData\", JSON.stringify(allNftData));\n      } else {\n        getProvider().then(provider => {\n          // console.log('key', provider.publicKey.toString());\n          publicKey = provider.publicKey.toString();\n          setProvider(provider.publicKey.toString());\n        }).then(() => {\n          letsgo();\n        }).catch(function(error){\n          console.log(error)\n          console.log(\"fail to make connection5\");\n        });\n      }\n    });\n  }, []);\n\n  useEffect(function () {    \n    unityContext.on(\"Logout\", function () {\n      if (window.solana.isConnected) {\n        window.solana.disconnect();\n        window.solana.on('disconnect', () => console.log(\"disconnected!\"))\n        unityContext.send(\"SolanaWalletConnect\", \"Disconnected\");\n      }\n    });\n  }, []);\n\n  useEffect(function () {\n    unityContext.on(\"progress\", function (progression) {\n      console.log(\"progress\");\n      setProgression(parseFloat(progression).toFixed(2));\n    });\n  }, []);\n\n\n  useEffect(function () {\n    unityContext.on(\"loaded\", function () {\n      console.log(\"loaded\");\n      setIsLoaded(true);\n    });\n  }, []);\n\nvar some = \"0\";\n  return (\n\n  <div style = {{\n    visibility: isLoaded ? \"hidden\" : \"visible\",\n    backgroundImage: `url(${background})`,\n      backgroundSize: \"cover\",\n      height: \"100%\",\n      width: \"100%\",\n      color: \"#f5f5f5\",\n    position: 'absolute',\n    left: 0,\n    top: 0,\n  }}>\n\n   <p\n    style={{ visibility: isLoaded ? \"hidden\" : \"visible\",\n    height: \"30px\",\n    width: \"100%\",\n    position: \"absolute\",\n    textAlign: 'center',\n    bottom: \"100px\",\n    fontSize: \"2em\",\n    fontColor: \"red\",\n\n    \n \n    }}>Loading... {progression * 100}%</p>\n\n    \n   \n   <div>\n   <Unity\n      style={{ visibility: isLoaded ? \"visible\" : \"hidden\",\n        height: \"100%\",\n        width: \"100%\",\n        background: \"grey\",\n        position: 'absolute',\n        left: 0,\n        top: 0,\n        overflow: \"hidden\",\n     \n    }}\n      unityContext={unityContext}\n    />\n    </div>\n    </div>\n  );\n\n  }\n\n  \n  \nexport default App"]},"metadata":{},"sourceType":"module"}