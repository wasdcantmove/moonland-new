{"ast":null,"code":"var _jsxFileName = \"/Users/liam/react-moonland/src/App.js\";\nimport styles from './App.css';\nimport React, { useState, useEffect } from \"react\";\nimport Unity, { UnityContext } from \"react-unity-webgl\";\nimport * as solanaWeb3 from '@solana/web3.js';\nimport parse from 'html-react-parser';\nimport background from \"./background.png\";\nimport ProgressBar from 'react-bootstrap/Button';\nimport reactDom from 'react-dom';\nimport axios from \"axios\";\nimport { Connection, clusterApiUrl, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\nimport { getParsedNftAccountsByOwner, isValidSolanaAddress, createConnectionConfig } from \"@nfteyez/sol-rayz\";\nimport './App.css';\nconst unityContext = new UnityContext({\n  loaderUrl: \"./Build/public.loader.js\",\n  dataUrl: \"./Build/public.data\",\n  frameworkUrl: \"./Build/public.framework.js\",\n  codeUrl: \"./Build/public.wasm\"\n});\n\nfunction App() {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [progression, setProgression] = useState(0);\n  const [provider, setProvider] = useState(\"\");\n\n  const getProvider = async () => {\n    if (\"solana\" in window) {\n      await window.solana.connect(); // opens wallet to connect to\n\n      const provider = window.solana;\n\n      if (provider.isPhantom) {\n        console.log(\"Is Phantom installed?  \", provider.isPhantom);\n        return provider;\n      }\n    } else {\n      window.alert('Install https://www.phantom.app/');\n    }\n  };\n\n  var publicKey;\n\n  window.onload = () => {\n    getProvider().then(provider => {\n      console.log('key', provider.publicKey.toString());\n      publicKey = provider.publicKey.toString();\n      setProvider(provider.publicKey.toString());\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }; //get NFT\n\n\n  const getAllNftData = async () => {\n    try {\n      const connect = createConnectionConfig(clusterApiUrl(\"devnet\"));\n      const provider = getProvider();\n      let ownerToken = \"8BnpSSotP9TW5jc1ExASvYhfcv196tH3VAAT1ewnNYJi\"; //let ownerToken = provider.publicKey;\n\n      const result = isValidSolanaAddress(ownerToken);\n      console.log(\"result\", result);\n      const nfts = await getParsedNftAccountsByOwner({\n        publicAddress: ownerToken,\n        connection: connect,\n        serialization: true\n      });\n      return nfts;\n    } catch (error) {\n      console.log(error);\n    }\n  }; //Function to get all nft data\n\n\n  const getNftTokenData = async () => {\n    try {\n      let nftData = await getAllNftData();\n      var data = Object.keys(nftData).map(key => nftData[key]);\n      let arr = [];\n      let n = data.length;\n\n      for (let i = 0; i < n; i++) {\n        console.log(data[i].data.uri);\n        let val = await axios.get(data[i].data.uri);\n        arr.push(val);\n      }\n\n      return arr;\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    setProvider(publicKey);\n  }, []);\n  useEffect(() => {\n    setProvider(publicKey);\n  }, []);\n  useEffect(function () {\n    unityContext.on(\"GetWallet\", function () {\n      if (window.solana.isConnected) {\n        console.log(window.solana.publicKey.toString());\n        console.log(provider.publicKey);\n        unityContext.send(\"Wallet\", \"SetWallet\", window.solana.publicKey.toString());\n      } else {\n        window.alert(\"Pleas Connect your Wallet or play like a guest\");\n      }\n    });\n  }, []);\n  useEffect(function () {\n    unityContext.on(\"progress\", function (progression) {\n      setProgression(progression);\n    });\n  }, []);\n  useEffect(function () {\n    unityContext.on(\"loaded\", function () {\n      setIsLoaded(true);\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      visibility: isLoaded ? \"hidden\" : \"visible\",\n      backgroundImage: `url(${background})`,\n      backgroundSize: \"cover\",\n      height: \"100%\",\n      width: \"100%\",\n      color: \"#f5f5f5\",\n      position: 'absolute',\n      left: 0,\n      top: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(ProgressBar, {\n    variant: \"success\",\n    now: progression * 100,\n    style: {\n      visibility: isLoaded ? \"hidden\" : \"visible\",\n      height: \"10px\",\n      width: \"100%\",\n      position: \"absolute\",\n      bottom: 0,\n      color: \"red\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 3\n    }\n  })), /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      visibility: isLoaded ? \"hidden\" : \"visible\",\n      height: \"30px\",\n      width: \"100%\",\n      position: \"absolute\",\n      textAlign: 'center',\n      bottom: \"100px\",\n      fontSize: \"2em\",\n      fontColor: \"red\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 4\n    }\n  }, \"help me...\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(Unity, {\n    style: {\n      visibility: isLoaded ? \"visible\" : \"hidden\",\n      height: \"100%\",\n      width: \"100%\",\n      background: \"grey\",\n      position: 'absolute',\n      left: 0,\n      top: 0,\n      overflow: \"hidden\"\n    },\n    unityContext: unityContext,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 4\n    }\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/liam/react-moonland/src/App.js"],"names":["styles","React","useState","useEffect","Unity","UnityContext","solanaWeb3","parse","background","ProgressBar","reactDom","axios","Connection","clusterApiUrl","LAMPORTS_PER_SOL","getParsedNftAccountsByOwner","isValidSolanaAddress","createConnectionConfig","unityContext","loaderUrl","dataUrl","frameworkUrl","codeUrl","App","isLoaded","setIsLoaded","progression","setProgression","provider","setProvider","getProvider","window","solana","connect","isPhantom","console","log","alert","publicKey","onload","then","toString","catch","error","getAllNftData","ownerToken","result","nfts","publicAddress","connection","serialization","getNftTokenData","nftData","data","Object","keys","map","key","arr","n","length","i","uri","val","get","push","on","isConnected","send","visibility","backgroundImage","backgroundSize","height","width","color","position","left","top","bottom","textAlign","fontSize","fontColor","overflow"],"mappings":"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","sourcesContent":["import styles from './App.css';\nimport React, {useState, useEffect } from \"react\";\nimport Unity, { UnityContext } from \"react-unity-webgl\";\nimport * as solanaWeb3 from '@solana/web3.js';\nimport parse from 'html-react-parser';\nimport background from \"./background.png\";\nimport ProgressBar from 'react-bootstrap/Button';\nimport reactDom from 'react-dom';\nimport axios from \"axios\";\nimport { Connection, clusterApiUrl, LAMPORTS_PER_SOL } from \"@solana/web3.js\";import { getParsedNftAccountsByOwner,isValidSolanaAddress, createConnectionConfig,} from \"@nfteyez/sol-rayz\";\nimport './App.css';\n\nconst unityContext = new UnityContext({\n  loaderUrl: \"./Build/public.loader.js\",\n  dataUrl: \"./Build/public.data\",\n  frameworkUrl: \"./Build/public.framework.js\",\n  codeUrl: \"./Build/public.wasm\"\n});\n\nfunction App() {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [progression, setProgression] = useState(0);\n  const [provider, setProvider] = useState(\"\");\n\n  const getProvider = async () => {\n    if (\"solana\" in window) {\n      await window.solana.connect(); // opens wallet to connect to\n      const provider = window.solana;\n      if (provider.isPhantom) {\n        console.log(\"Is Phantom installed?  \", provider.isPhantom);\n        return provider;\n      }\n    } else {\n      window.alert('Install https://www.phantom.app/');\n    }\n  };\n  \n  var publicKey;\n  \n  window.onload = () => {\n    getProvider().then(provider => {\n      console.log('key', provider.publicKey.toString());\n      publicKey = provider.publicKey.toString();\n      setProvider(provider.publicKey.toString());\n    })\n    .catch(function(error){\n      console.log(error)\n    });\n  \n  }\n\n  //get NFT\n  const getAllNftData = async () => {\n    try {\n      const connect =    createConnectionConfig(clusterApiUrl(\"devnet\"));\n      const provider = getProvider();\n      let ownerToken = \"8BnpSSotP9TW5jc1ExASvYhfcv196tH3VAAT1ewnNYJi\"\n      //let ownerToken = provider.publicKey;\n      const result = isValidSolanaAddress(ownerToken);\n      console.log(\"result\", result);\n      const nfts = await getParsedNftAccountsByOwner({\n        publicAddress: ownerToken,\n        connection: connect,\n        serialization: true,\n      });\n      return nfts;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//Function to get all nft data\nconst getNftTokenData = async () => {\n  try {\n    let nftData = await getAllNftData();\n    var data = Object.keys(nftData).map((key) => nftData[key]);                                                                    let arr = [];\n    let n = data.length;\n    for (let i = 0; i < n; i++) {\n      console.log(data[i].data.uri);\n      let val = await axios.get(data[i].data.uri);\n      arr.push(val);\n    }\n    return arr;\n  } catch (error) {\n    console.log(error);\n  }\n};\n  \n  useEffect( () => {\n   setProvider(publicKey);\n  }, []);\n  useEffect( () => {\n    setProvider(publicKey);\n   }, []);\n\n   useEffect(function () {    \n    unityContext.on(\"GetWallet\", function () {\n      if (window.solana.isConnected) {\n        console.log(window.solana.publicKey.toString());\n        console.log(provider.publicKey);\n        unityContext.send(\"Wallet\", \"SetWallet\", window.solana.publicKey.toString());\n      } else {\n        window.alert(\"Pleas Connect your Wallet or play like a guest\");\n      }\n    });\n  }, []);\n\n\n  useEffect(function () {\n    unityContext.on(\"progress\", function (progression) {\n      setProgression(progression);\n    });\n  }, []);\n\n\n  useEffect(function () {\n    unityContext.on(\"loaded\", function () {\n      setIsLoaded(true);\n    });\n  }, []);\n \n\n\n\n  return (\n\n  <div style = {{\n    visibility: isLoaded ? \"hidden\" : \"visible\",\n    backgroundImage: `url(${background})`,\n      backgroundSize: \"cover\",\n      height: \"100%\",\n      width: \"100%\",\n      color: \"#f5f5f5\",\n    position: 'absolute',\n    left: 0,\n    top: 0,\n\n    \n  }}>\n   <div>\n  <ProgressBar variant=\"success\" now={progression * 100}\n  style={{ visibility: isLoaded ? \"hidden\" : \"visible\",\n  height: \"10px\",\n  width: \"100%\",\n  position: \"absolute\",\n  bottom: 0,\n  color: \"red\",\n  }}\n  \n  />\n  \n    </div>\n    \n   <p\n    style={{ visibility: isLoaded ? \"hidden\" : \"visible\",\n    height: \"30px\",\n    width: \"100%\",\n    position: \"absolute\",\n    textAlign: 'center',\n    bottom: \"100px\",\n    fontSize: \"2em\",\n    fontColor: \"red\",\n\n    \n \n    }}>help me...</p>\n   \n   <div>\n   <Unity\n      style={{ visibility: isLoaded ? \"visible\" : \"hidden\",\n        height: \"100%\",\n        width: \"100%\",\n        background: \"grey\",\n        position: 'absolute',\n        left: 0,\n        top: 0,\n        overflow: \"hidden\",\n     \n    }}\n      unityContext={unityContext}\n    />\n    </div>\n    </div>\n  );\n\n  }\n  \nexport default App"]},"metadata":{},"sourceType":"module"}