{"ast":null,"code":"var _jsxFileName = \"/Users/liam/react-moonland/src/App.js\";\nimport styles from './App.css';\nimport React, { useState, useEffect } from \"react\";\nimport Unity, { UnityContext } from \"react-unity-webgl\";\nimport * as solanaWeb3 from '@solana/web3.js';\nimport parse from 'html-react-parser';\nimport background from \"./background.png\";\nimport ProgressBar from 'react-bootstrap/Button';\nimport reactDom from 'react-dom';\nimport axios from \"axios\";\nimport { Connection, clusterApiUrl, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\nimport { getParsedNftAccountsByOwner, isValidSolanaAddress, createConnectionConfig } from \"@nfteyez/sol-rayz\";\nimport './App.css';\nconst unityContext = new UnityContext({\n  loaderUrl: \"./Build/public.loader.js\",\n  dataUrl: \"./Build/public.data\",\n  frameworkUrl: \"./Build/public.framework.js\",\n  codeUrl: \"./Build/public.wasm\"\n});\n\nfunction App() {\n  // const [isLoaded, setIsLoaded] = useState(false);\n  // const [progression, setProgression] = useState(0);\n  // const [provider, setProvider] = useState(\"\");\n  //check solana on window. This is useful to fetch address of your wallet.\n  const getProvider = async () => {\n    if (\"solana\" in window) {\n      const provider = window.solana;\n\n      if (provider.isPhantom) {\n        console.log(\"And our public key is?  \", provider.publicKey.toString());\n        console.log(\"Is Phantom installed?  \", provider.isPhantom);\n        console.log(\"Are we connected?  \", window.solana.isConnected);\n        return provider;\n      }\n    }\n  }; // const getProvider = async () => {\n  //   if (\"solana\" in window) {\n  //     await window.solana.connect(); // opens wallet to connect to\n  //     const provider = window.solana;\n  //     if (provider.isPhantom) {\n  //       console.log(\"Is Phantom installed?  \", provider.isPhantom);\n  //       return provider;\n  //     }\n  //   } else {\n  //     window.alert('Install https://www.phantom.app/');\n  //   }\n  // };\n\n\n  var publicKey;\n  var allNftData; // window.onload = () => {\n  //   getProvider().then(provider => {\n  //     console.log('key', provider.publicKey.toString());\n  //     publicKey = provider.publicKey.toString();\n  //     setProvider(provider.publicKey.toString());\n  //   })\n  //   .catch(function(error){\n  //     console.log(error)\n  //   });\n  // }\n  //create a connection\n\n  const createConnection = () => {\n    return new Connection(clusterApiUrl(\"devnet\")); // return new Connection(clusterApiUrl(\"mainnet-beta\"));\n  }; //get NFT\n\n\n  const getAllNftData = async () => {\n    try {\n      // const connect =  createConnectionConfig(clusterApiUrl(\"mainnet-beta\"));\n      const connect = createConnectionConfig(clusterApiUrl(\"devnet\"));\n      const provider = getProvider(); // let ownerToken = \"8BnpSSotP9TW5jc1ExASvYhfcv196tH3VAAT1ewnNYJi\"\n\n      console.log(\"THE KEY IS:\" + provider.publicKey);\n      let ownerToken = provider.publicKey;\n      const result = isValidSolanaAddress(ownerToken);\n      console.log(\"result\", result);\n      const nfts = await getParsedNftAccountsByOwner({\n        publicAddress: ownerToken,\n        connection: connect,\n        serialization: true\n      });\n      return nfts;\n    } catch (error) {\n      console.log(error);\n    }\n  }; //Function to get all nft data\n\n\n  const getNftTokenData = async () => {\n    try {\n      let nftData = await getAllNftData();\n      var data = Object.keys(nftData).map(key => nftData[key]);\n      let arr = [];\n      let n = data.length;\n\n      for (let i = 0; i < n; i++) {\n        console.log(data[i].data.uri);\n        let val = await axios.get(data[i].data.uri);\n        arr.push(val);\n        console.log(val.data.image);\n      }\n\n      allNftData = arr;\n      return arr;\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const NFT = async props => {\n    const [nftData, setNftData] = useState([]);\n    const [loading, setLoading] = useState(false);\n    createConnection();\n    getProvider();\n    useEffect(() => {\n      async function data() {\n        let res = await getAllNftData();\n        setNftData(res);\n        setLoading(true);\n        getNftTokenData();\n      }\n\n      data();\n    }, []);\n  };\n\n  useEffect(() => {\n    setProvider(publicKey);\n  }, []);\n  useEffect(() => {\n    setProvider(publicKey);\n  }, []);\n  useEffect(function () {\n    unityContext.on(\"GetWallet\", function () {\n      if (window.solana.isConnected) {\n        console.log(window.solana.publicKey.toString());\n        console.log(provider.publicKey);\n        console.log(allNftData);\n        unityContext.send(\"Wallet\", \"SetWallet\", allNftData);\n      } else {\n        window.alert(\"Pleas Connect your Wallet or play like a guest\");\n      }\n    });\n  }, []);\n  useEffect(function () {\n    unityContext.on(\"progress\", function (progression) {\n      setProgression(progression);\n    });\n  }, []);\n  useEffect(function () {\n    unityContext.on(\"loaded\", function () {\n      setIsLoaded(true);\n    });\n  }, []);\n\n  window.onload = () => {\n    getProvider().then(provider => {\n      console.log('key', provider.publicKey.toString());\n      publicKey = provider.publicKey.toString();\n      setProvider(provider.publicKey.toString());\n    }).catch(function (error) {\n      console.log(error);\n    });\n  };\n\n  setTimeout(function () {\n    getProvider();\n  }, 5000); // NFT();\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      visibility: isLoaded ? \"hidden\" : \"visible\",\n      backgroundImage: `url(${background})`,\n      backgroundSize: \"cover\",\n      height: \"100%\",\n      width: \"100%\",\n      color: \"#f5f5f5\",\n      position: 'absolute',\n      left: 0,\n      top: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(ProgressBar, {\n    variant: \"success\",\n    now: progression * 100,\n    style: {\n      visibility: isLoaded ? \"hidden\" : \"visible\",\n      height: \"10px\",\n      width: \"100%\",\n      position: \"absolute\",\n      bottom: 0,\n      color: \"red\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 3\n    }\n  })), /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      visibility: isLoaded ? \"hidden\" : \"visible\",\n      height: \"30px\",\n      width: \"100%\",\n      position: \"absolute\",\n      textAlign: 'center',\n      bottom: \"100px\",\n      fontSize: \"2em\",\n      fontColor: \"red\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 4\n    }\n  }, \"help me...\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(Unity, {\n    style: {\n      visibility: isLoaded ? \"visible\" : \"hidden\",\n      height: \"100%\",\n      width: \"100%\",\n      background: \"grey\",\n      position: 'absolute',\n      left: 0,\n      top: 0,\n      overflow: \"hidden\"\n    },\n    unityContext: unityContext,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 4\n    }\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/liam/react-moonland/src/App.js"],"names":["styles","React","useState","useEffect","Unity","UnityContext","solanaWeb3","parse","background","ProgressBar","reactDom","axios","Connection","clusterApiUrl","LAMPORTS_PER_SOL","getParsedNftAccountsByOwner","isValidSolanaAddress","createConnectionConfig","unityContext","loaderUrl","dataUrl","frameworkUrl","codeUrl","App","getProvider","window","provider","solana","isPhantom","console","log","publicKey","toString","isConnected","allNftData","createConnection","getAllNftData","connect","ownerToken","result","nfts","publicAddress","connection","serialization","error","getNftTokenData","nftData","data","Object","keys","map","key","arr","n","length","i","uri","val","get","push","image","NFT","props","setNftData","loading","setLoading","res","setProvider","on","send","alert","progression","setProgression","setIsLoaded","onload","then","catch","setTimeout","visibility","isLoaded","backgroundImage","backgroundSize","height","width","color","position","left","top","bottom","textAlign","fontSize","fontColor","overflow"],"mappings":"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","sourcesContent":["import styles from './App.css';\nimport React, {useState, useEffect } from \"react\";\nimport Unity, { UnityContext } from \"react-unity-webgl\";\nimport * as solanaWeb3 from '@solana/web3.js';\nimport parse from 'html-react-parser';\nimport background from \"./background.png\";\nimport ProgressBar from 'react-bootstrap/Button';\nimport reactDom from 'react-dom';\nimport axios from \"axios\";\nimport { Connection, clusterApiUrl, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\nimport { getParsedNftAccountsByOwner,isValidSolanaAddress, createConnectionConfig,} from \"@nfteyez/sol-rayz\";\nimport './App.css';\n\nconst unityContext = new UnityContext({\n  loaderUrl: \"./Build/public.loader.js\",\n  dataUrl: \"./Build/public.data\",\n  frameworkUrl: \"./Build/public.framework.js\",\n  codeUrl: \"./Build/public.wasm\"\n});\n\nfunction App() {\n  // const [isLoaded, setIsLoaded] = useState(false);\n  // const [progression, setProgression] = useState(0);\n  // const [provider, setProvider] = useState(\"\");\n\n//check solana on window. This is useful to fetch address of your wallet.\nconst getProvider = async () => {\n  if (\"solana\" in window) {\n    const provider = window.solana;\n    if (provider.isPhantom) {\n      console.log(\"And our public key is?  \", provider.publicKey.toString());\n      console.log(\"Is Phantom installed?  \", provider.isPhantom);\n      console.log(\"Are we connected?  \", window.solana.isConnected);\n      return provider;\n    }\n  }\n};\n\n  // const getProvider = async () => {\n  //   if (\"solana\" in window) {\n  //     await window.solana.connect(); // opens wallet to connect to\n  //     const provider = window.solana;\n  //     if (provider.isPhantom) {\n  //       console.log(\"Is Phantom installed?  \", provider.isPhantom);\n  //       return provider;\n  //     }\n  //   } else {\n  //     window.alert('Install https://www.phantom.app/');\n  //   }\n  // };\n  \n  var publicKey;\n  var allNftData;\n  \n  // window.onload = () => {\n  //   getProvider().then(provider => {\n  //     console.log('key', provider.publicKey.toString());\n  //     publicKey = provider.publicKey.toString();\n  //     setProvider(provider.publicKey.toString());\n  //   })\n  //   .catch(function(error){\n  //     console.log(error)\n  //   });\n  \n  // }\n\n  //create a connection\nconst createConnection = () => {\n  return new Connection(clusterApiUrl(\"devnet\"));\n  // return new Connection(clusterApiUrl(\"mainnet-beta\"));\n};\n\n  //get NFT\n  const getAllNftData = async () => {\n    try {\n      // const connect =  createConnectionConfig(clusterApiUrl(\"mainnet-beta\"));\n      const connect =  createConnectionConfig(clusterApiUrl(\"devnet\"));\n      const provider = getProvider();\n      // let ownerToken = \"8BnpSSotP9TW5jc1ExASvYhfcv196tH3VAAT1ewnNYJi\"\n      console.log(\"THE KEY IS:\" + provider.publicKey);\n      let ownerToken = provider.publicKey;\n      const result = isValidSolanaAddress(ownerToken);\n      console.log(\"result\", result);\n      const nfts = await getParsedNftAccountsByOwner({\n        publicAddress: ownerToken,\n        connection: connect,\n        serialization: true,\n      });\n      return nfts;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//Function to get all nft data\nconst getNftTokenData = async () => {\n  try {\n    let nftData = await getAllNftData();\n    var data = Object.keys(nftData).map((key) => nftData[key]);                                                                    let arr = [];\n    let n = data.length;\n    for (let i = 0; i < n; i++) {\n      console.log(data[i].data.uri);\n      let val = await axios.get(data[i].data.uri);\n      arr.push(val);\n      console.log(val.data.image);\n    }\n    allNftData = arr;\n    return arr;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst NFT = async (props) => {\n  const [nftData, setNftData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  createConnection();\n  getProvider();\nuseEffect(() => {\n    async function data() {\n      let res = await getAllNftData();\n      setNftData(res);\n      setLoading(true);\n      getNftTokenData();\n    }\n    data();\n  }, []);\n}\n  \n  useEffect( () => {\n   setProvider(publicKey);\n  }, []);\n  useEffect( () => {\n    setProvider(publicKey);\n   }, []);\n\n   useEffect(function () {    \n    unityContext.on(\"GetWallet\", function () {\n      if (window.solana.isConnected) {\n        console.log(window.solana.publicKey.toString());\n        console.log(provider.publicKey);\n        console.log(allNftData);\n        unityContext.send(\"Wallet\", \"SetWallet\", allNftData);\n      } else {\n        window.alert(\"Pleas Connect your Wallet or play like a guest\");\n      }\n    });\n  }, []);\n\n\n  useEffect(function () {\n    unityContext.on(\"progress\", function (progression) {\n      setProgression(progression);\n    });\n  }, []);\n\n\n  useEffect(function () {\n    unityContext.on(\"loaded\", function () {\n      setIsLoaded(true);\n    });\n  }, []);\n\n  window.onload = () => {\n    getProvider().then(provider => {\n      console.log('key', provider.publicKey.toString());\n      publicKey = provider.publicKey.toString();\n      setProvider(provider.publicKey.toString());\n    })\n    .catch(function(error){\n      console.log(error)\n    });\n  }\n\nsetTimeout(function () {\n  getProvider();\n}, 5000);\n\n// NFT();\n\n  return (\n\n  <div style = {{\n    visibility: isLoaded ? \"hidden\" : \"visible\",\n    backgroundImage: `url(${background})`,\n      backgroundSize: \"cover\",\n      height: \"100%\",\n      width: \"100%\",\n      color: \"#f5f5f5\",\n    position: 'absolute',\n    left: 0,\n    top: 0,\n\n    \n  }}>\n   <div>\n  <ProgressBar variant=\"success\" now={progression * 100}\n  style={{ visibility: isLoaded ? \"hidden\" : \"visible\",\n  height: \"10px\",\n  width: \"100%\",\n  position: \"absolute\",\n  bottom: 0,\n  color: \"red\",\n  }}\n  \n  />\n  \n    </div>\n    \n   <p\n    style={{ visibility: isLoaded ? \"hidden\" : \"visible\",\n    height: \"30px\",\n    width: \"100%\",\n    position: \"absolute\",\n    textAlign: 'center',\n    bottom: \"100px\",\n    fontSize: \"2em\",\n    fontColor: \"red\",\n\n    \n \n    }}>help me...</p>\n   \n   <div>\n   <Unity\n      style={{ visibility: isLoaded ? \"visible\" : \"hidden\",\n        height: \"100%\",\n        width: \"100%\",\n        background: \"grey\",\n        position: 'absolute',\n        left: 0,\n        top: 0,\n        overflow: \"hidden\",\n     \n    }}\n      unityContext={unityContext}\n    />\n    </div>\n    </div>\n  );\n\n  }\n  \nexport default App"]},"metadata":{},"sourceType":"module"}