{"ast":null,"code":"var _jsxFileName = \"/Users/liam/react-moonland/src/App.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Unity, { UnityContext } from \"react-unity-webgl\";\nimport background from \"./background.png\";\nimport axios from \"axios\";\nimport { Connection, clusterApiUrl } from \"@solana/web3.js\";\nimport { getParsedNftAccountsByOwner, isValidSolanaAddress, createConnectionConfig } from \"@nfteyez/sol-rayz\";\nimport './App.css';\nvar publicKey;\nvar allNftData;\nvar loc = window.location.href + '';\n\nif (loc.indexOf('http://') == 0) {\n  window.location.href = loc.replace('http://', 'https://');\n}\n\nconst unityContext = new UnityContext({\n  loaderUrl: \"./Build/public.loader.js\",\n  dataUrl: \"./Build/public.data\",\n  frameworkUrl: \"./Build/public.framework.js\",\n  codeUrl: \"./Build/public.wasm\"\n});\n\nfunction App() {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [progression, setProgression] = useState(0);\n  const [provider, setProvider] = useState(\"\");\n\n  const getProvider = async () => {\n    if (\"solana\" in window) {\n      await window.solana.connect();\n      const provider = window.solana;\n\n      if (provider.isPhantom) {\n        return provider;\n      }\n    } else {\n      window.alert('Install https://www.phantom.app/');\n    }\n  };\n\n  async function letsgo() {\n    createConnection();\n    getProvider();\n\n    async function data() {\n      let res = await getAllNftData();\n      getNftTokenData();\n    }\n\n    data();\n  } //create a connection\n\n\n  const createConnection = () => {\n    // return new Connection(clusterApiUrl(\"devnet\"));\n    return new Connection(\"https://solana-api.projectserum.com/\", {\n      headers: {\n        \"Access-Control-Allow-Origin\": \"*\",\n        \"Access-Control-Request-Headers\": \"*\",\n        \"Access-Control-Allow-Methods\": \"GET, POST, PATCH, PUT, DELETE, OPTIONS\",\n        \"Access-Control-Allow-Headers\": \"Origin, Content-Type\"\n      },\n      mode: 'no-cors'\n    }); // Connection(\"https://www.whateverorigin.org/get?url=\" + clusterApiUrl(\"mainnet-beta\"))\n  }; //get NFT\n\n\n  const getAllNftData = async () => {\n    try {\n      const connect = createConnectionConfig(\"https://solana-api.projectserum.com/\", {\n        headers: {\n          \"Access-Control-Allow-Origin\": \"*\",\n          \"Access-Control-Request-Headers\": \"*\",\n          \"Access-Control-Allow-Methods\": \"GET, POST, PATCH, PUT, DELETE, OPTIONS\",\n          \"Access-Control-Allow-Headers\": \"Origin, Content-Type\"\n        },\n        mode: 'no-cors'\n      }); // const connect =  createConnectionConfig(clusterApiUrl(\"devnet\"));\n\n      const provider = getProvider();\n      let ownerToken = publicKey;\n      const result = isValidSolanaAddress(ownerToken);\n      const nfts = await getParsedNftAccountsByOwner({\n        publicAddress: ownerToken,\n        connection: connect,\n        serialization: true\n      });\n      return nfts;\n    } catch (error) {\n      console.log(error);\n    }\n  }; //Function to get all nft data\n\n\n  const getNftTokenData = async () => {\n    try {\n      var root = {\n        data: {\n          arr: []\n        }\n      };\n      let nftData = await getAllNftData();\n      var data = Object.keys(nftData).map(key => nftData[key]);\n      let n = data.length;\n\n      for (let i = 0; i < n; i++) {\n        let val = await axios.get(data[i].data.uri, {\n          statusCode: 200,\n          headers: {// \"Access-Control-Allow-Origin\":\"*\",\n            // \"Access-Control-Request-Headers\":\"*\",\n            // \"Access-Control-Allow-Methods\": \"GET, POST, PATCH, PUT, DELETE, OPTIONS\",\n            // \"Access-Control-Allow-Headers\": \"Origin, Content-Type\"\n          },\n          mode: 'no-cors'\n        });\n        root.data.arr.push(val);\n      }\n\n      let newJson = JSON.parse(somJson, (key, value) => {\n        if (typeof value === 'number') {\n          return value.toString();\n        }\n\n        if (typeof value === 'boolean') {\n          return value.toString();\n        }\n\n        return value;\n      }); // console.log(JSON.stringify(newJson));\n\n      allNftData = newJson; // console.log(JSON.stringify(allNftData));\n\n      unityContext.send(\"SolanaWalletConnect\", \"SetNFTData\", JSON.stringify(allNftData));\n      return root.data.arr;\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  function convertNumbers(jsonArray) {\n    const stringifyNumbers = obj => {\n      const result = {};\n      jsonArray.entries(obj).map(entry => {\n        const type = typeof entry[1];\n\n        if (Array.isArray(entry[1])) {\n          result[entry[0]] = entry[1].map(entry => stringifyNumbers(entry));\n        } else if (type === 'object' && !!entry[1]) {\n          result[entry[0]] = stringifyNumbers(entry[1]);\n        } else if (entry[1] === null) {\n          result[entry[0]] = null;\n        } else if (type === 'number') {\n          result[entry[0]] = String(entry[1]);\n        } else {\n          result[entry[0]] = entry[1];\n        }\n      });\n      return result;\n    };\n  }\n\n  const NFT = async props => {\n    const [nftData, setNftData] = useState([]);\n    const [loading, setLoading] = useState(false);\n    createConnection();\n    getProvider();\n    useEffect(() => {\n      async function data() {\n        let res = await getAllNftData();\n        setNftData(res);\n        setLoading(true);\n        getNftTokenData();\n      }\n\n      data();\n    }, []);\n  };\n\n  useEffect(() => {\n    setProvider(publicKey);\n  }, []);\n  useEffect(() => {\n    setProvider(publicKey);\n  }, []);\n  useEffect(function () {\n    unityContext.on(\"NFT\", function () {\n      if (window.solana.isConnected) {\n        // console.log(JSON.stringify(allNftData));\n        unityContext.send(\"SolanaWalletConnect\", \"SetNFTData\", JSON.stringify(allNftData));\n      } else {\n        getProvider().then(provider => {\n          // console.log('key', provider.publicKey.toString());\n          publicKey = provider.publicKey.toString();\n          setProvider(provider.publicKey.toString());\n        }).then(() => {\n          letsgo();\n        }).catch(function (error) {\n          console.log(error);\n          console.log(\"fail to make connection5\");\n        });\n      }\n    });\n  }, []);\n  useEffect(function () {\n    unityContext.on(\"Logout\", function () {\n      if (window.solana.isConnected) {\n        window.solana.disconnect();\n        window.solana.on('disconnect', () => console.log(\"disconnected!\"));\n        unityContext.send(\"SolanaWalletConnect\", \"Disconnected\");\n      }\n    });\n  }, []);\n  useEffect(function () {\n    unityContext.on(\"progress\", function (progression) {\n      console.log(\"progress\");\n      setProgression(parseFloat(progression).toFixed(2));\n    });\n  }, []);\n  useEffect(function () {\n    unityContext.on(\"loaded\", function () {\n      console.log(\"loaded\");\n      setIsLoaded(true);\n    });\n  }, []);\n  var some = \"0\";\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      visibility: isLoaded ? \"hidden\" : \"visible\",\n      backgroundImage: `url(${background})`,\n      backgroundSize: \"cover\",\n      height: \"100%\",\n      width: \"100%\",\n      color: \"#f5f5f5\",\n      position: 'absolute',\n      left: 0,\n      top: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      visibility: isLoaded ? \"hidden\" : \"visible\",\n      height: \"30px\",\n      width: \"100%\",\n      position: \"absolute\",\n      textAlign: 'center',\n      bottom: \"100px\",\n      fontSize: \"2em\",\n      fontColor: \"red\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 4\n    }\n  }, \"Loading... \", progression * 100, \"%\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(Unity, {\n    style: {\n      visibility: isLoaded ? \"visible\" : \"hidden\",\n      height: \"100%\",\n      width: \"100%\",\n      background: \"grey\",\n      position: 'absolute',\n      left: 0,\n      top: 0,\n      overflow: \"hidden\"\n    },\n    unityContext: unityContext,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 4\n    }\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/liam/react-moonland/src/App.js"],"names":["React","useState","useEffect","Unity","UnityContext","background","axios","Connection","clusterApiUrl","getParsedNftAccountsByOwner","isValidSolanaAddress","createConnectionConfig","publicKey","allNftData","loc","window","location","href","indexOf","replace","unityContext","loaderUrl","dataUrl","frameworkUrl","codeUrl","App","isLoaded","setIsLoaded","progression","setProgression","provider","setProvider","getProvider","solana","connect","isPhantom","alert","letsgo","createConnection","data","res","getAllNftData","getNftTokenData","headers","mode","ownerToken","result","nfts","publicAddress","connection","serialization","error","console","log","root","arr","nftData","Object","keys","map","key","n","length","i","val","get","uri","statusCode","push","newJson","JSON","parse","somJson","value","toString","send","stringify","convertNumbers","jsonArray","stringifyNumbers","obj","entries","entry","type","Array","isArray","String","NFT","props","setNftData","loading","setLoading","on","isConnected","then","catch","disconnect","parseFloat","toFixed","some","visibility","backgroundImage","backgroundSize","height","width","color","position","left","top","textAlign","bottom","fontSize","fontColor","overflow"],"mappings":"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","sourcesContent":["import React, {useState, useEffect } from \"react\";\nimport Unity, { UnityContext } from \"react-unity-webgl\";\nimport background from \"./background.png\";\nimport axios from \"axios\";\nimport { Connection, clusterApiUrl } from \"@solana/web3.js\";\nimport { getParsedNftAccountsByOwner, isValidSolanaAddress, createConnectionConfig} from \"@nfteyez/sol-rayz\";\nimport './App.css';\n\nvar publicKey;\nvar allNftData;\n\nvar loc = window.location.href+'';\nif (loc.indexOf('http://')==0){\n  window.location.href = loc.replace('http://','https://');\n}\n\nconst unityContext = new UnityContext({\n  loaderUrl: \"./Build/public.loader.js\",\n  dataUrl: \"./Build/public.data\",\n  frameworkUrl: \"./Build/public.framework.js\",\n  codeUrl: \"./Build/public.wasm\"\n});\n\nfunction App() {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [progression, setProgression] = useState(0);\n  const [provider, setProvider] = useState(\"\");\n\n\n  const getProvider = async () => {\n    if (\"solana\" in window) {\n      await window.solana.connect();\n      const provider = window.solana;\n      if (provider.isPhantom) {\n        return provider;\n      }\n    } else {\n      window.alert('Install https://www.phantom.app/');\n    }\n  };\n\n  async function letsgo() {\n     createConnection();\n     getProvider();\n       async function data() {\n         let res = await getAllNftData();\n         getNftTokenData();\n       }\n       data();\n  }\n\n  //create a connection\nconst createConnection = () => {\n  // return new Connection(clusterApiUrl(\"devnet\"));\n  return new Connection(\"https://solana-api.projectserum.com/\", {\n    headers: {\n      \"Access-Control-Allow-Origin\":\"*\",\n      \"Access-Control-Request-Headers\":\"*\",\n      \"Access-Control-Allow-Methods\": \"GET, POST, PATCH, PUT, DELETE, OPTIONS\",\n      \"Access-Control-Allow-Headers\": \"Origin, Content-Type\"\n    },\n    mode: 'no-cors'\n    })\n  // Connection(\"https://www.whateverorigin.org/get?url=\" + clusterApiUrl(\"mainnet-beta\"))\n};\n\n  //get NFT\n  const getAllNftData = async () => {\n    try {\n      const connect =  createConnectionConfig(\"https://solana-api.projectserum.com/\", {\n        headers: {\n          \"Access-Control-Allow-Origin\":\"*\",\n          \"Access-Control-Request-Headers\":\"*\",\n          \"Access-Control-Allow-Methods\": \"GET, POST, PATCH, PUT, DELETE, OPTIONS\",\n          \"Access-Control-Allow-Headers\": \"Origin, Content-Type\"\n        },\n        mode: 'no-cors'\n        })\n      // const connect =  createConnectionConfig(clusterApiUrl(\"devnet\"));\n      const provider = getProvider();\n      let ownerToken = publicKey;\n      const result = isValidSolanaAddress(ownerToken);\n      const nfts = await getParsedNftAccountsByOwner({\n        publicAddress: ownerToken,\n        connection: connect,\n        serialization: true,\n      });\n      return nfts;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//Function to get all nft data\nconst getNftTokenData = async () => {\n  try {\n    var root = {\n      data:{\n        arr:[]\n      } \n    };\n    let nftData = await getAllNftData();\n    var data = Object.keys(nftData).map((key) => nftData[key]);                                                                    \n    let n = data.length;\n    for (let i = 0; i < n; i++) {\n      let val = await axios.get(data[i].data.uri, {\n          statusCode: 200,\n          headers: {\n            // \"Access-Control-Allow-Origin\":\"*\",\n            // \"Access-Control-Request-Headers\":\"*\",\n            // \"Access-Control-Allow-Methods\": \"GET, POST, PATCH, PUT, DELETE, OPTIONS\",\n            // \"Access-Control-Allow-Headers\": \"Origin, Content-Type\"\n          },\n          mode: 'no-cors'\n      }\n      );\n      root.data.arr.push(val);\n    }\n\nlet newJson = JSON.parse(somJson, (key, value) => {\n    if (typeof value === 'number') {\n      return value.toString();\n    }\n    if (typeof value === 'boolean') {\n      return value.toString();\n    }\n    return value;\n  });\n    // console.log(JSON.stringify(newJson));\n    allNftData = newJson;\n    // console.log(JSON.stringify(allNftData));\n    unityContext.send(\"SolanaWalletConnect\", \"SetNFTData\", JSON.stringify(allNftData));\n    return root.data.arr;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nfunction convertNumbers(jsonArray) {\n  const stringifyNumbers = obj => {                                                                                      \n    const result = {};                                                                                                   \n    jsonArray.entries(obj).map(entry => {                                                                                   \n      const type = typeof entry[1];                                                                                      \n      if (Array.isArray(entry[1])) {                                                                                     \n        result[entry[0]] = entry[1].map(entry => stringifyNumbers(entry));                                               \n      } else if (type === 'object' && !!entry[1]) {                                                                      \n        result[entry[0]] = stringifyNumbers(entry[1]);                                                                   \n      } else if (entry[1] === null) {                                                                                    \n        result[entry[0]] = null;                                                                                         \n      } else if (type === 'number') {                                                                                    \n        result[entry[0]] = String(entry[1]);                                                                             \n      } else {                                                                                                           \n        result[entry[0]] = entry[1];                                                                                     \n      }                                                                                                                  \n    });                                                                                                                  \n    return result;                                                                                                       \n  }   \n}\n\nconst NFT = async (props) => {\n  const [nftData, setNftData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  createConnection();\n  getProvider();\nuseEffect(() => {\n    async function data() {\n      let res = await getAllNftData();\n      setNftData(res);\n      setLoading(true);\n      getNftTokenData();\n    }\n    data();\n  }, []);\n}\n  \n  useEffect( () => {\n   setProvider(publicKey);\n  }, []);\n  useEffect( () => {\n    setProvider(publicKey);\n   }, []);\n\n   useEffect(function () {    \n    unityContext.on(\"NFT\", function () {\n      if (window.solana.isConnected) {\n        // console.log(JSON.stringify(allNftData));\n\n        unityContext.send(\"SolanaWalletConnect\", \"SetNFTData\", JSON.stringify(allNftData));\n      } else {\n        getProvider().then(provider => {\n          // console.log('key', provider.publicKey.toString());\n          publicKey = provider.publicKey.toString();\n          setProvider(provider.publicKey.toString());\n        }).then(() => {\n          letsgo();\n        }).catch(function(error){\n          console.log(error)\n          console.log(\"fail to make connection5\");\n        });\n      }\n    });\n  }, []);\n\n  useEffect(function () {    \n    unityContext.on(\"Logout\", function () {\n      if (window.solana.isConnected) {\n        window.solana.disconnect();\n        window.solana.on('disconnect', () => console.log(\"disconnected!\"))\n        unityContext.send(\"SolanaWalletConnect\", \"Disconnected\");\n      }\n    });\n  }, []);\n\n  useEffect(function () {\n    unityContext.on(\"progress\", function (progression) {\n      console.log(\"progress\");\n      setProgression(parseFloat(progression).toFixed(2));\n    });\n  }, []);\n\n\n  useEffect(function () {\n    unityContext.on(\"loaded\", function () {\n      console.log(\"loaded\");\n      setIsLoaded(true);\n    });\n  }, []);\n\nvar some = \"0\";\n  return (\n\n  <div style = {{\n    visibility: isLoaded ? \"hidden\" : \"visible\",\n    backgroundImage: `url(${background})`,\n      backgroundSize: \"cover\",\n      height: \"100%\",\n      width: \"100%\",\n      color: \"#f5f5f5\",\n    position: 'absolute',\n    left: 0,\n    top: 0,\n  }}>\n\n   <p\n    style={{ visibility: isLoaded ? \"hidden\" : \"visible\",\n    height: \"30px\",\n    width: \"100%\",\n    position: \"absolute\",\n    textAlign: 'center',\n    bottom: \"100px\",\n    fontSize: \"2em\",\n    fontColor: \"red\",\n\n    \n \n    }}>Loading... {progression * 100}%</p>\n\n    \n   \n   <div>\n   <Unity\n      style={{ visibility: isLoaded ? \"visible\" : \"hidden\",\n        height: \"100%\",\n        width: \"100%\",\n        background: \"grey\",\n        position: 'absolute',\n        left: 0,\n        top: 0,\n        overflow: \"hidden\",\n     \n    }}\n      unityContext={unityContext}\n    />\n    </div>\n    </div>\n  );\n\n  }\n\n  \n  \nexport default App"]},"metadata":{},"sourceType":"module"}