{"ast":null,"code":"var _jsxFileName = \"/Users/liam/react-moonland/src/App.js\";\nimport styles from './App.css';\nimport React, { useState, useEffect } from \"react\";\nimport Unity, { UnityContext } from \"react-unity-webgl\";\nimport * as solanaWeb3 from '@solana/web3.js';\nimport parse from 'html-react-parser';\nimport background from \"./background.png\";\nimport ProgressBar from 'react-bootstrap/Button';\nimport reactDom from 'react-dom';\nimport axios from \"axios\";\nimport { Connection, clusterApiUrl, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\nimport { getParsedNftAccountsByOwner, isValidSolanaAddress, createConnectionConfig } from \"@nfteyez/sol-rayz\";\nimport './App.css';\nconst unityContext = new UnityContext({\n  loaderUrl: \"./Build/public.loader.js\",\n  dataUrl: \"./Build/public.data\",\n  frameworkUrl: \"./Build/public.framework.js\",\n  codeUrl: \"./Build/public.wasm\"\n});\n\nfunction App() {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [progression, setProgression] = useState(0);\n  const [provider, setProvider] = useState(\"\");\n}\n\nexport default App; //create a connection of devnet\n\nconst createConnection = () => {\n  return new Connection(clusterApiUrl(\"devnet\"));\n}; //check solana on window. This is useful to fetch address of your wallet.\n\n\nconst getProvider = () => {\n  if (\"solana\" in window) {\n    const provider = window.solana;\n\n    if (provider.isPhantom) {\n      return provider;\n    }\n  }\n}; //get NFT\n\n\nconst getAllNftData = async () => {\n  try {\n    const connect = createConnectionConfig(clusterApiUrl(\"devnet\"));\n    const provider = getProvider();\n    let ownerToken = provider.publicKey;\n    const result = isValidSolanaAddress(ownerToken);\n    console.log(\"result\", result);\n    const nfts = await getParsedNftAccountsByOwner({\n      publicAddress: ownerToken,\n      connection: connect,\n      serialization: true\n    });\n    return nfts;\n  } catch (error) {\n    console.log(error);\n  }\n}; //Function to get all nft data\n\n\nconst getNftTokenData = async () => {\n  try {\n    let nftData = await getAllNftData();\n    var data = Object.keys(nftData).map(key => nftData[key]);\n    let arr = [];\n    let n = data.length;\n\n    for (let i = 0; i < n; i++) {\n      console.log(data[i].data.uri);\n      let val = await axios.get(data[i].data.uri);\n      arr.push(val);\n    }\n\n    return arr;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst NFT = props => {\n  const [nftData, setNftData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  createConnection();\n  getProvider();\n  getAllNftData();\n  useEffect(() => {\n    async function data() {\n      let res = await getAllNftData();\n      setNftData(res);\n      setLoading(true);\n    }\n\n    data();\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      visibility: isLoaded ? \"hidden\" : \"visible\",\n      backgroundImage: `url(${background})`,\n      backgroundSize: \"cover\",\n      height: \"100%\",\n      width: \"100%\",\n      color: \"#f5f5f5\",\n      position: 'absolute',\n      left: 0,\n      top: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(ProgressBar, {\n    variant: \"success\",\n    now: progression * 100,\n    style: {\n      visibility: isLoaded ? \"hidden\" : \"visible\",\n      height: \"10px\",\n      width: \"100%\",\n      position: \"absolute\",\n      bottom: 0,\n      color: \"red\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 5\n    }\n  })), /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      visibility: isLoaded ? \"hidden\" : \"visible\",\n      height: \"30px\",\n      width: \"100%\",\n      position: \"absolute\",\n      textAlign: 'center',\n      bottom: \"100px\",\n      fontSize: \"2em\",\n      fontColor: \"red\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 6\n    }\n  }, \"Loading...\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(Unity, {\n    style: {\n      visibility: isLoaded ? \"visible\" : \"hidden\",\n      height: \"100%\",\n      width: \"100%\",\n      background: \"grey\",\n      position: 'absolute',\n      left: 0,\n      top: 0,\n      overflow: \"hidden\"\n    },\n    unityContext: unityContext,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 6\n    }\n  })));\n}; // function App() {\n//   return (\n//     <div>\n//       <Unity unityContext={unityContext}\n//       style={{\n//         height: \"100%\",\n//         width: 950,\n//         border: \"2xp solid black\",\n//         background: \"grey\"\n//       }}\n//       /> \n//     </div>\n//   );\n// }\n// export default App;\n// function App() {\n//   return <Unity unityContext={unityContext} />;\n// }\n// function App() {\n//   const [isLoaded, setIsLoaded] = useState(false);\n//   const [progression, setProgression] = useState(0);\n//   const [provider, setProvider] = useState(\"\");\n//   const getProvider = async () => {\n//     if (\"solana\" in window) {\n//       await window.solana.connect(); // opens wallet to connect to\n//       const provider = window.solana;\n//       if (provider.isPhantom) {\n//         console.log(\"Is Phantom installed?  \", provider.isPhantom);\n//         return provider;\n//       }\n//     } else {\n//       window.alert('Install https://www.phantom.app/');\n//     }\n//   };\n//   var publicKey;\n//   window.onload = () => {\n//     getProvider().then(provider => {\n//       console.log('key',\n//       provider.publicKey.toString());\n//       publicKey = provider.publicKey.toString();\n//       setProvider(provider.publicKey.toString());\n//     })\n//     .catch(function(error){\n//       console.log(error)\n//     });\n//   }\n//   useEffect( () => {\n//    setProvider(publicKey);\n//   }, []);\n//   useEffect( () => {\n//     setProvider(publicKey);\n//    }, []);\n//    useEffect(function () {\n//     unityContext.on(\"GetWallet\", function () {\n//       if (window.solana.isConnected)\n//       {\n//         console.log(window.solana.publicKey.toString());\n//       console.log(provider.publicKey);\n//       unityContext.send(\"Wallet\", \"SetWallet\", window.solana.publicKey.toString());\n//       }\n//       else\n//       {\n//         window.alert(\"Pleas Connect your Wallet or play like a guest\");\n//       }\n//     });\n//   }, []);\n//   useEffect(function () {\n//     unityContext.on(\"progress\", function (progression) {\n//       setProgression(progression);\n//     });\n//   }, []);\n//   useEffect(function () {\n//     unityContext.on(\"loaded\", function () {\n//       setIsLoaded(true);\n//     });\n//   }, []);\n// return (\n// <div style = {{\n//   visibility: isLoaded ? \"hidden\" : \"visible\",\n//   backgroundImage: `url(${background})`,\n//     backgroundSize: \"cover\",\n//     height: \"100%\",\n//     width: \"100%\",\n//     color: \"#f5f5f5\",\n//   position: 'absolute',\n//   left: 0,\n//   top: 0,\n// }}>\n//  <div>\n// <ProgressBar variant=\"success\" now={progression * 100}\n// style={{ visibility: isLoaded ? \"hidden\" : \"visible\",\n// height: \"10px\",\n// width: \"100%\",\n// position: \"absolute\",\n// bottom: 0,\n// color: \"red\",\n// }}\n// />\n//   </div>\n//  <p\n//   style={{ visibility: isLoaded ? \"hidden\" : \"visible\",\n//   height: \"30px\",\n//   width: \"100%\",\n//   position: \"absolute\",\n//   textAlign: 'center',\n//   bottom: \"100px\",\n//   fontSize: \"2em\",\n//   fontColor: \"red\",\n//   }}>Loading...</p>\n//  <div>\n//  <Unity\n//     style={{ visibility: isLoaded ? \"visible\" : \"hidden\",\n//       height: \"100%\",\n//       width: \"100%\",\n//       background: \"grey\",\n//       position: 'absolute',\n//       left: 0,\n//       top: 0,\n//       overflow: \"hidden\",\n//   }}\n//     unityContext={unityContext}\n//   />\n//   </div>\n//   </div>\n// );\n// }\n// export default App","map":{"version":3,"sources":["/Users/liam/react-moonland/src/App.js"],"names":["styles","React","useState","useEffect","Unity","UnityContext","solanaWeb3","parse","background","ProgressBar","reactDom","axios","Connection","clusterApiUrl","LAMPORTS_PER_SOL","getParsedNftAccountsByOwner","isValidSolanaAddress","createConnectionConfig","unityContext","loaderUrl","dataUrl","frameworkUrl","codeUrl","App","isLoaded","setIsLoaded","progression","setProgression","provider","setProvider","createConnection","getProvider","window","solana","isPhantom","getAllNftData","connect","ownerToken","publicKey","result","console","log","nfts","publicAddress","connection","serialization","error","getNftTokenData","nftData","data","Object","keys","map","key","arr","n","length","i","uri","val","get","push","NFT","props","setNftData","loading","setLoading","res","visibility","backgroundImage","backgroundSize","height","width","color","position","left","top","bottom","textAlign","fontSize","fontColor","overflow"],"mappings":"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","sourcesContent":["import styles from './App.css';\nimport React, {useState, useEffect } from \"react\";\nimport Unity, { UnityContext } from \"react-unity-webgl\";\nimport * as solanaWeb3 from '@solana/web3.js';\nimport parse from 'html-react-parser';\nimport background from \"./background.png\";\nimport ProgressBar from 'react-bootstrap/Button';\nimport reactDom from 'react-dom';\nimport axios from \"axios\";\nimport { Connection, clusterApiUrl, LAMPORTS_PER_SOL } from \"@solana/web3.js\";import { getParsedNftAccountsByOwner,isValidSolanaAddress, createConnectionConfig,} from \"@nfteyez/sol-rayz\";\nimport './App.css';\n\nconst unityContext = new UnityContext({\n  loaderUrl: \"./Build/public.loader.js\",\n  dataUrl: \"./Build/public.data\",\n  frameworkUrl: \"./Build/public.framework.js\",\n  codeUrl: \"./Build/public.wasm\"\n});\n\n\nfunction App() {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [progression, setProgression] = useState(0);\n  const [provider, setProvider] = useState(\"\");\n}\n\n\nexport default App;\n//create a connection of devnet\nconst createConnection = () => {\n    return new Connection(clusterApiUrl(\"devnet\"));\n};\n\n//check solana on window. This is useful to fetch address of your wallet.\nconst getProvider = () => {\n  if (\"solana\" in window) {\n  const provider = window.solana;\n  if (provider.isPhantom) {\n    return provider;\n   }\n  }\n};\n\n//get NFT\nconst getAllNftData = async () => {\n  try {\n      const connect =    createConnectionConfig(clusterApiUrl(\"devnet\"));\n      const provider = getProvider();\n      let ownerToken = provider.publicKey;\n      const result = isValidSolanaAddress(ownerToken);\n      console.log(\"result\", result);\nconst nfts = await getParsedNftAccountsByOwner({\n        publicAddress: ownerToken,\n        connection: connect,\n        serialization: true,\n      });\n      return nfts;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//Function to get all nft data\nconst getNftTokenData = async () => {\n  try {\n    let nftData = await getAllNftData();\n    var data = Object.keys(nftData).map((key) => nftData[key]);                                                                    let arr = [];\n    let n = data.length;\n    for (let i = 0; i < n; i++) {\n      console.log(data[i].data.uri);\n      let val = await axios.get(data[i].data.uri);\n      arr.push(val);\n    }\n    return arr;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst NFT = (props) => {\n  const [nftData, setNftData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  createConnection();\n  getProvider();\n  getAllNftData();\nuseEffect(() => {\n    async function data() {\n      let res = await getAllNftData();\n      setNftData(res);\n      setLoading(true);\n    }\n    data();\n  }, []);\n  return (\n\n    <div style = {{\n      visibility: isLoaded ? \"hidden\" : \"visible\",\n      backgroundImage: `url(${background})`,\n        backgroundSize: \"cover\",\n        height: \"100%\",\n        width: \"100%\",\n        color: \"#f5f5f5\",\n      position: 'absolute',\n      left: 0,\n      top: 0,\n  \n      \n    }}>\n     <div>\n    <ProgressBar variant=\"success\" now={progression * 100}\n    style={{ visibility: isLoaded ? \"hidden\" : \"visible\",\n    height: \"10px\",\n    width: \"100%\",\n    position: \"absolute\",\n    bottom: 0,\n    color: \"red\",\n    }}\n    \n    />\n    \n      </div>\n      \n     <p\n      style={{ visibility: isLoaded ? \"hidden\" : \"visible\",\n      height: \"30px\",\n      width: \"100%\",\n      position: \"absolute\",\n      textAlign: 'center',\n      bottom: \"100px\",\n      fontSize: \"2em\",\n      fontColor: \"red\",\n  \n      \n   \n      }}>Loading...</p>\n     \n     <div>\n     <Unity\n        style={{ visibility: isLoaded ? \"visible\" : \"hidden\",\n          height: \"100%\",\n          width: \"100%\",\n          background: \"grey\",\n          position: 'absolute',\n          left: 0,\n          top: 0,\n          overflow: \"hidden\",\n       \n      }}\n        unityContext={unityContext}\n      />\n      </div>\n      </div>\n    );\n};\n\n\n// function App() {\n\n//   return (\n//     <div>\n//       <Unity unityContext={unityContext}\n//       style={{\n//         height: \"100%\",\n//         width: 950,\n//         border: \"2xp solid black\",\n//         background: \"grey\"\n//       }}\n//       /> \n//     </div>\n//   );\n// }\n\n// export default App;\n\n\n\n// function App() {\n//   return <Unity unityContext={unityContext} />;\n// }\n\n// function App() {\n//   const [isLoaded, setIsLoaded] = useState(false);\n//   const [progression, setProgression] = useState(0);\n//   const [provider, setProvider] = useState(\"\");\n  \n\n\n//   const getProvider = async () => {\n//     if (\"solana\" in window) {\n      \n//       await window.solana.connect(); // opens wallet to connect to\n  \n//       const provider = window.solana;\n//       if (provider.isPhantom) {\n//         console.log(\"Is Phantom installed?  \", provider.isPhantom);\n//         return provider;\n//       }\n//     } else {\n//       window.alert('Install https://www.phantom.app/');\n//     }\n//   };\n  \n//   var publicKey;\n  \n//   window.onload = () => {\n  \n//     getProvider().then(provider => {\n//       console.log('key',\n      \n      \n//       provider.publicKey.toString());\n//       publicKey = provider.publicKey.toString();\n//       setProvider(provider.publicKey.toString());\n//     })\n//     .catch(function(error){\n//       console.log(error)\n//     });\n  \n//   }\n  \n\n\n//   useEffect( () => {\n//    setProvider(publicKey);\n//   }, []);\n//   useEffect( () => {\n//     setProvider(publicKey);\n//    }, []);\n\n\n//    useEffect(function () {\n\n    \n//     unityContext.on(\"GetWallet\", function () {\n\n         \n     \n//       if (window.solana.isConnected)\n//       {\n//         console.log(window.solana.publicKey.toString());\n      \n//       console.log(provider.publicKey);\n//       unityContext.send(\"Wallet\", \"SetWallet\", window.solana.publicKey.toString());\n\n//       }\n//       else\n//       {\n//         window.alert(\"Pleas Connect your Wallet or play like a guest\");\n//       }\n      \n\n      \n     \n//     });\n//   }, []);\n\n\n//   useEffect(function () {\n//     unityContext.on(\"progress\", function (progression) {\n//       setProgression(progression);\n//     });\n//   }, []);\n\n\n//   useEffect(function () {\n//     unityContext.on(\"loaded\", function () {\n//       setIsLoaded(true);\n//     });\n//   }, []);\n \n\n\n\n  // return (\n\n  // <div style = {{\n  //   visibility: isLoaded ? \"hidden\" : \"visible\",\n  //   backgroundImage: `url(${background})`,\n  //     backgroundSize: \"cover\",\n  //     height: \"100%\",\n  //     width: \"100%\",\n  //     color: \"#f5f5f5\",\n  //   position: 'absolute',\n  //   left: 0,\n  //   top: 0,\n\n    \n  // }}>\n  //  <div>\n  // <ProgressBar variant=\"success\" now={progression * 100}\n  // style={{ visibility: isLoaded ? \"hidden\" : \"visible\",\n  // height: \"10px\",\n  // width: \"100%\",\n  // position: \"absolute\",\n  // bottom: 0,\n  // color: \"red\",\n  // }}\n  \n  // />\n  \n  //   </div>\n    \n  //  <p\n  //   style={{ visibility: isLoaded ? \"hidden\" : \"visible\",\n  //   height: \"30px\",\n  //   width: \"100%\",\n  //   position: \"absolute\",\n  //   textAlign: 'center',\n  //   bottom: \"100px\",\n  //   fontSize: \"2em\",\n  //   fontColor: \"red\",\n\n    \n \n  //   }}>Loading...</p>\n   \n  //  <div>\n  //  <Unity\n  //     style={{ visibility: isLoaded ? \"visible\" : \"hidden\",\n  //       height: \"100%\",\n  //       width: \"100%\",\n  //       background: \"grey\",\n  //       position: 'absolute',\n  //       left: 0,\n  //       top: 0,\n  //       overflow: \"hidden\",\n     \n  //   }}\n  //     unityContext={unityContext}\n  //   />\n  //   </div>\n  //   </div>\n  // );\n// }\n\n// export default App"]},"metadata":{},"sourceType":"module"}